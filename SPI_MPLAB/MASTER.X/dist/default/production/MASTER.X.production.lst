

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Nov 25 14:02:39 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 12/02/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000E                     	;# 
   133  000F                     	;# 
   134  0010                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0014                     	;# 
   139  0015                     	;# 
   140  0015                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001A                     	;# 
   146  001B                     	;# 
   147  001B                     	;# 
   148  001C                     	;# 
   149  001D                     	;# 
   150  001E                     	;# 
   151  001F                     	;# 
   152  0081                     	;# 
   153  0085                     	;# 
   154  0086                     	;# 
   155  0087                     	;# 
   156  0088                     	;# 
   157  0089                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  018C                     	;# 
   176  018D                     	;# 
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  0008                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  000E                     	;# 
   193  000F                     	;# 
   194  0010                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0014                     	;# 
   199  0015                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  001A                     	;# 
   206  001B                     	;# 
   207  001B                     	;# 
   208  001C                     	;# 
   209  001D                     	;# 
   210  001E                     	;# 
   211  001F                     	;# 
   212  0081                     	;# 
   213  0085                     	;# 
   214  0086                     	;# 
   215  0087                     	;# 
   216  0088                     	;# 
   217  0089                     	;# 
   218  008C                     	;# 
   219  008D                     	;# 
   220  008E                     	;# 
   221  0091                     	;# 
   222  0092                     	;# 
   223  0093                     	;# 
   224  0094                     	;# 
   225  0098                     	;# 
   226  0099                     	;# 
   227  009C                     	;# 
   228  009D                     	;# 
   229  009E                     	;# 
   230  009F                     	;# 
   231  010C                     	;# 
   232  010D                     	;# 
   233  010E                     	;# 
   234  010F                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237                           
   238                           	psect	strings
   239  0003                     __pstrings:
   240  0003                     stringtab:
   241  0003                     __stringtab:
   242                           
   243                           ;	String table - string pointers are 1 byte each
   244  0003  1BFF               	btfsc	btemp+1,7
   245  0004  280D               	ljmp	stringcode
   246  0005  1383               	bcf	3,7
   247  0006  187F               	btfsc	btemp+1,0
   248  0007  1783               	bsf	3,7
   249  0008  0800               	movf	0,w
   250  0009  0A84               	incf	4,f
   251  000A  1903               	skipnz
   252  000B  0AFF               	incf	btemp+1,f
   253  000C  0008               	return
   254  000D                     stringcode:
   255  000D                     stringdir:
   256  000D  3000               	movlw	high stringdir
   257  000E  008A               	movwf	10
   258  000F  0804               	movf	4,w
   259  0010  0A84               	incf	4,f
   260  0011  0782               	addwf	2,f
   261  0012                     __stringbase:
   262  0012  3400               	retlw	0
   263  0013                     __end_of__stringtab:
   264  0013                     _dpowers:
   265  0013  3401               	retlw	1
   266  0014  3400               	retlw	0
   267  0015  340A               	retlw	10
   268  0016  3400               	retlw	0
   269  0017  3464               	retlw	100
   270  0018  3400               	retlw	0
   271  0019  34E8               	retlw	232
   272  001A  3403               	retlw	3
   273  001B  3410               	retlw	16
   274  001C  3427               	retlw	39
   275  001D                     __end_of_dpowers:
   276  0013                     _SSPBUF	set	19
   277  0014                     _SSPCON	set	20
   278  0008                     _PORTD	set	8
   279  0019                     _TXREG	set	25
   280  001A                     _RCREG	set	26
   281  0041                     _RD1	set	65
   282  0040                     _RD0	set	64
   283  0063                     _SSPIF	set	99
   284  0030                     _RB0	set	48
   285  002A                     _RA2	set	42
   286  0029                     _RA1	set	41
   287  0065                     _RCIF	set	101
   288  00C4                     _CREN	set	196
   289  00C7                     _SPEN	set	199
   290  0094                     _SSPSTATbits	set	148
   291  0094                     _SSPSTAT	set	148
   292  0088                     _TRISD	set	136
   293  0086                     _TRISB	set	134
   294  0085                     _TRISA	set	133
   295  0099                     _SPBRG	set	153
   296  043B                     _TRISC3	set	1083
   297  043D                     _TRISC5	set	1085
   298  040F                     _nRBPU	set	1039
   299  04C1                     _TRMT	set	1217
   300  04C5                     _TXEN	set	1221
   301  043E                     _TRISC6	set	1086
   302  043F                     _TRISC7	set	1087
   303  04C4                     _SYNC	set	1220
   304  04C2                     _BRGH	set	1218
   305  001D                     STR_2:
   306  001D  3473               	retlw	115	;'s'
   307  001E  3431               	retlw	49	;'1'
   308  001F  3420               	retlw	32	;' '
   309  0020  343D               	retlw	61	;'='
   310  0021  3420               	retlw	32	;' '
   311  0022  3400               	retlw	0
   312  0023                     STR_5:
   313  0023  3473               	retlw	115	;'s'
   314  0024  3432               	retlw	50	;'2'
   315  0025  3420               	retlw	32	;' '
   316  0026  343D               	retlw	61	;'='
   317  0027  3420               	retlw	32	;' '
   318  0028  3400               	retlw	0
   319  0029                     STR_1:
   320  0029  3425               	retlw	37	;'%'
   321  002A  3464               	retlw	100	;'d'
   322  002B  340A               	retlw	10
   323  002C  3400               	retlw	0
   324  002D                     STR_3:
   325  002D  340A               	retlw	10
   326  002E  340D               	retlw	13
   327  002F  3400               	retlw	0
   328  0029                     
   329                           	psect	cinit
   330  07FC                     start_initialization:	
   331                           ; #config settings
   332                           
   333  07FC                     __initialization:
   334  07FC                     end_of_initialization:	
   335                           ;End of C runtime variable initialization code
   336                           
   337  07FC                     __end_of__initialization:
   338  07FC  0183               	clrf	3
   339  07FD  120A  118A  2EEC   	ljmp	_main	;jump to C main() function
   340                           
   341                           	psect	cstackCOMMON
   342  0070                     __pcstackCOMMON:
   343  0070                     ?_spiInit:
   344  0070                     ?_spiWrite:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ??_spiWrite:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ?_spiRead:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ??_spiRead:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ?_UART_Write:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ??_UART_Write:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ?_main:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_spiReceiveWait:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ??_spiReceiveWait:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?___lwdiv:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?___aldiv:	
   375                           ; 2 bytes @ 0x0
   376                           
   377  0070                     UART_Write@data:	
   378                           ; 4 bytes @ 0x0
   379                           
   380  0070                     spiInit@sDataSample:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     spiWrite@dat:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ___lwdiv@divisor:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ___aldiv@divisor:	
   390                           ; 2 bytes @ 0x0
   391                           
   392                           
   393                           ; 4 bytes @ 0x0
   394  0070                     	ds	1
   395  0071                     ?_UART_Write_Text:
   396  0071                     spiInit@sClockIdle:	
   397                           ; 1 bytes @ 0x1
   398                           
   399  0071                     UART_Write_Text@text:	
   400                           ; 1 bytes @ 0x1
   401                           
   402                           
   403                           ; 2 bytes @ 0x1
   404  0071                     	ds	1
   405  0072                     spiInit@sTransmitEdge:
   406  0072                     ___lwdiv@dividend:	
   407                           ; 1 bytes @ 0x2
   408                           
   409                           
   410                           ; 2 bytes @ 0x2
   411  0072                     	ds	1
   412  0073                     ??_spiInit:
   413  0073                     ??_UART_Write_Text:	
   414                           ; 1 bytes @ 0x3
   415                           
   416  0073                     spiInit@sType:	
   417                           ; 1 bytes @ 0x3
   418                           
   419                           
   420                           ; 1 bytes @ 0x3
   421  0073                     	ds	1
   422  0074                     ??___lwdiv:
   423  0074                     ___aldiv@dividend:	
   424                           ; 1 bytes @ 0x4
   425                           
   426                           
   427                           ; 4 bytes @ 0x4
   428  0074                     	ds	1
   429  0075                     ___lwdiv@quotient:
   430                           
   431                           ; 2 bytes @ 0x5
   432  0075                     	ds	1
   433  0076                     UART_Write_Text@i:
   434                           
   435                           ; 2 bytes @ 0x6
   436  0076                     	ds	1
   437  0077                     ___lwdiv@counter:
   438                           
   439                           ; 1 bytes @ 0x7
   440  0077                     	ds	1
   441  0078                     ??___aldiv:
   442  0078                     ?___lwmod:	
   443                           ; 1 bytes @ 0x8
   444                           
   445  0078                     ___lwmod@divisor:	
   446                           ; 2 bytes @ 0x8
   447                           
   448                           
   449                           ; 2 bytes @ 0x8
   450  0078                     	ds	1
   451  0079                     UART_Init@x:
   452                           
   453                           ; 2 bytes @ 0x9
   454  0079                     	ds	1
   455  007A                     ___lwmod@dividend:
   456                           
   457                           ; 2 bytes @ 0xA
   458  007A                     	ds	2
   459  007C                     ??___lwmod:
   460                           
   461                           ; 1 bytes @ 0xC
   462  007C                     	ds	1
   463  007D                     ___lwmod@counter:
   464                           
   465                           ; 1 bytes @ 0xD
   466  007D                     	ds	1
   467                           
   468                           	psect	cstackBANK0
   469  0020                     __pcstackBANK0:
   470  0020                     ?_sprintf:
   471  0020                     sprintf@f:	
   472                           ; 2 bytes @ 0x0
   473                           
   474  0020                     ___aldiv@counter:	
   475                           ; 1 bytes @ 0x0
   476                           
   477                           
   478                           ; 1 bytes @ 0x0
   479  0020                     	ds	1
   480  0021                     ___aldiv@sign:
   481                           
   482                           ; 1 bytes @ 0x1
   483  0021                     	ds	1
   484  0022                     ___aldiv@quotient:
   485                           
   486                           ; 4 bytes @ 0x2
   487  0022                     	ds	1
   488  0023                     ??_sprintf:
   489                           
   490                           ; 1 bytes @ 0x3
   491  0023                     	ds	3
   492  0026                     ?_UART_Init:
   493  0026                     sprintf@ap:	
   494                           ; 1 bytes @ 0x6
   495                           
   496  0026                     UART_Init@baudrate:	
   497                           ; 1 bytes @ 0x6
   498                           
   499                           
   500                           ; 4 bytes @ 0x6
   501  0026                     	ds	1
   502  0027                     sprintf@flag:
   503                           
   504                           ; 1 bytes @ 0x7
   505  0027                     	ds	1
   506  0028                     sprintf@prec:
   507                           
   508                           ; 1 bytes @ 0x8
   509  0028                     	ds	1
   510  0029                     sprintf@val:
   511                           
   512                           ; 2 bytes @ 0x9
   513  0029                     	ds	1
   514  002A                     ??_UART_Init:
   515                           
   516                           ; 1 bytes @ 0xA
   517  002A                     	ds	1
   518  002B                     sprintf@sp:
   519                           
   520                           ; 1 bytes @ 0xB
   521  002B                     	ds	1
   522  002C                     sprintf@c:
   523                           
   524                           ; 1 bytes @ 0xC
   525  002C                     	ds	10
   526  0036                     ??_main:
   527                           
   528                           ; 1 bytes @ 0x16
   529  0036                     	ds	3
   530  0039                     main@out:
   531                           
   532                           ; 10 bytes @ 0x19
   533  0039                     	ds	10
   534  0043                     main@s1:
   535                           
   536                           ; 2 bytes @ 0x23
   537  0043                     	ds	2
   538  0045                     main@s2:
   539                           
   540                           ; 2 bytes @ 0x25
   541  0045                     	ds	2
   542                           
   543                           	psect	maintext
   544  06EC                     __pmaintext:	
   545 ;;
   546 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   547 ;;
   548 ;; *************** function _main *****************
   549 ;; Defined at:
   550 ;;		line 25 in file "newmain.c"
   551 ;; Parameters:    Size  Location     Type
   552 ;;		None
   553 ;; Auto vars:     Size  Location     Type
   554 ;;  out            10   25[BANK0 ] unsigned char [10]
   555 ;;  s2              2   37[BANK0 ] int 
   556 ;;  s1              2   35[BANK0 ] int 
   557 ;; Return value:  Size  Location     Type
   558 ;;                  1    wreg      void 
   559 ;; Registers used:
   560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   561 ;; Tracked objects:
   562 ;;		On entry : B00/0
   563 ;;		On exit  : 0/0
   564 ;;		Unchanged: 0/0
   565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   566 ;;      Params:         0       0       0       0       0
   567 ;;      Locals:         0      14       0       0       0
   568 ;;      Temps:          0       3       0       0       0
   569 ;;      Totals:         0      17       0       0       0
   570 ;;Total ram usage:       17 bytes
   571 ;; Hardware stack levels required when called: 2
   572 ;; This function calls:
   573 ;;		_UART_Init
   574 ;;		_UART_Write_Text
   575 ;;		_spiInit
   576 ;;		_spiRead
   577 ;;		_spiWrite
   578 ;;		_sprintf
   579 ;; This function is called by:
   580 ;;		Startup code after reset
   581 ;; This function uses a non-reentrant model
   582 ;;
   583                           
   584                           
   585                           ;psect for function _main
   586  06EC                     _main:
   587  06EC                     l1294:	
   588                           ;incstack = 0
   589                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   590                           
   591                           
   592                           ;newmain.c: 27:    nRBPU = 0;
   593  06EC  1683               	bsf	3,5	;RP0=1, select bank1
   594  06ED  1303               	bcf	3,6	;RP1=0, select bank1
   595  06EE  1381               	bcf	1,7	;volatile
   596  06EF                     l1296:
   597                           
   598                           ;newmain.c: 28:    TRISA = 0;
   599  06EF  0185               	clrf	5	;volatile
   600  06F0                     l1298:
   601                           
   602                           ;newmain.c: 29:    TRISB = 1;
   603  06F0  3001               	movlw	1
   604  06F1  0086               	movwf	6	;volatile
   605  06F2                     l1300:
   606                           
   607                           ;newmain.c: 30:    TRISD = 0;
   608  06F2  0188               	clrf	8	;volatile
   609  06F3                     l1302:
   610                           
   611                           ;newmain.c: 31:    PORTD = 0;
   612  06F3  1283               	bcf	3,5	;RP0=0, select bank0
   613  06F4  1303               	bcf	3,6	;RP1=0, select bank0
   614  06F5  0188               	clrf	8	;volatile
   615  06F6                     l1304:
   616                           
   617                           ;newmain.c: 32:    RA1 = 1;
   618  06F6  1485               	bsf	5,1	;volatile
   619  06F7                     l1306:
   620                           
   621                           ;newmain.c: 33:    RA2 = 1;
   622  06F7  1505               	bsf	5,2	;volatile
   623  06F8                     l1308:
   624                           
   625                           ;newmain.c: 34:    UART_Init (9600);
   626  06F8  3000               	movlw	0
   627  06F9  00A9               	movwf	UART_Init@baudrate+3
   628  06FA  3000               	movlw	0
   629  06FB  00A8               	movwf	UART_Init@baudrate+2
   630  06FC  3025               	movlw	37
   631  06FD  00A7               	movwf	UART_Init@baudrate+1
   632  06FE  3080               	movlw	128
   633  06FF  00A6               	movwf	UART_Init@baudrate
   634  0700  120A  118A  252A  120A  118A  	fcall	_UART_Init
   635  0705                     l1310:
   636                           
   637                           ;newmain.c: 36:    spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_L
      +                          OW, SPI_IDLE_2_ACTIVE);
   638  0705  01F0               	clrf	spiInit@sDataSample
   639  0706  01F1               	clrf	spiInit@sClockIdle
   640  0707  01F2               	clrf	spiInit@sTransmitEdge
   641  0708  3020               	movlw	32
   642  0709  120A  118A  23B7  120A  118A  	fcall	_spiInit
   643  070E                     l1312:
   644                           
   645                           ;newmain.c: 39:    {;newmain.c: 40:        int s1 = 0;
   646  070E  1283               	bcf	3,5	;RP0=0, select bank0
   647  070F  1303               	bcf	3,6	;RP1=0, select bank0
   648  0710  01C3               	clrf	main@s1
   649  0711  01C4               	clrf	main@s1+1
   650  0712                     l1314:
   651                           
   652                           ;newmain.c: 41:        int s2 = 0;
   653  0712  01C5               	clrf	main@s2
   654  0713  01C6               	clrf	main@s2+1
   655  0714                     l1316:
   656                           
   657                           ;newmain.c: 42:        char out [10];;newmain.c: 43:        if (RB0 == 0)
   658  0714  1806               	btfsc	6,0	;volatile
   659  0715  2F17               	goto	u941
   660  0716  2F18               	goto	u940
   661  0717                     u941:
   662  0717  2F78               	goto	l1340
   663  0718                     u940:
   664  0718                     l1318:
   665                           
   666                           ;newmain.c: 44:        {;newmain.c: 45:            RA1 = 0;
   667  0718  1085               	bcf	5,1	;volatile
   668  0719                     l1320:
   669                           
   670                           ;newmain.c: 46:            _delay((unsigned long)((1)*(8000000/4000.0)));
   671  0719  3003               	movlw	3
   672  071A  1283               	bcf	3,5	;RP0=0, select bank0
   673  071B  1303               	bcf	3,6	;RP1=0, select bank0
   674  071C  00B7               	movwf	??_main+1
   675  071D  3097               	movlw	151
   676  071E  00B6               	movwf	??_main
   677  071F                     u977:
   678  071F  0BB6               	decfsz	??_main,f
   679  0720  2F1F               	goto	u977
   680  0721  0BB7               	decfsz	??_main+1,f
   681  0722  2F1F               	goto	u977
   682  0723                     l1322:
   683                           
   684                           ;newmain.c: 48:            spiWrite(1);
   685  0723  3001               	movlw	1
   686  0724  120A  118A  2395  120A  118A  	fcall	_spiWrite
   687  0729                     l1324:
   688                           
   689                           ;newmain.c: 49:            s1 = spiRead();
   690  0729  120A  118A  23A2  120A  118A  	fcall	_spiRead
   691  072E  1283               	bcf	3,5	;RP0=0, select bank0
   692  072F  1303               	bcf	3,6	;RP1=0, select bank0
   693  0730  00B6               	movwf	??_main
   694  0731  01B7               	clrf	??_main+1
   695  0732  0836               	movf	??_main,w
   696  0733  00C3               	movwf	main@s1
   697  0734  0837               	movf	??_main+1,w
   698  0735  00C4               	movwf	main@s1+1
   699  0736                     l1326:
   700                           
   701                           ;newmain.c: 50:            sprintf (out, "%d\n", s1);
   702  0736  3017               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   703  0737  00B6               	movwf	??_main
   704  0738  0836               	movf	??_main,w
   705  0739  00A0               	movwf	sprintf@f
   706  073A  0844               	movf	main@s1+1,w
   707  073B  00A2               	movwf	?_sprintf+2
   708  073C  0843               	movf	main@s1,w
   709  073D  00A1               	movwf	?_sprintf+1
   710  073E  3039               	movlw	(low (main@out| 0))& (0+255)
   711  073F  120A  118A  2604  120A  118A  	fcall	_sprintf
   712  0744                     l1328:
   713                           
   714                           ;newmain.c: 51:            UART_Write_Text ("s1 = ");
   715  0744  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   716  0745  00F1               	movwf	UART_Write_Text@text
   717  0746  3080               	movlw	128
   718  0747  00F2               	movwf	UART_Write_Text@text+1
   719  0748  120A  118A  2407  120A  118A  	fcall	_UART_Write_Text
   720  074D                     l1330:
   721                           
   722                           ;newmain.c: 52:            UART_Write_Text (out);
   723  074D  3039               	movlw	(low (main@out| 0))& (0+255)
   724  074E  00F1               	movwf	UART_Write_Text@text
   725  074F  3000               	movlw	0
   726  0750  00F2               	movwf	UART_Write_Text@text+1
   727  0751  120A  118A  2407  120A  118A  	fcall	_UART_Write_Text
   728  0756                     l1332:
   729                           
   730                           ;newmain.c: 53:            _delay((unsigned long)((90)*(8000000/4000.0)));
   731  0756  30EA               	movlw	234
   732  0757  1283               	bcf	3,5	;RP0=0, select bank0
   733  0758  1303               	bcf	3,6	;RP1=0, select bank0
   734  0759  00B7               	movwf	??_main+1
   735  075A  30C2               	movlw	194
   736  075B  00B6               	movwf	??_main
   737  075C                     u987:
   738  075C  0BB6               	decfsz	??_main,f
   739  075D  2F5C               	goto	u987
   740  075E  0BB7               	decfsz	??_main+1,f
   741  075F  2F5C               	goto	u987
   742  0760  0000               	nop
   743                           
   744                           ;newmain.c: 54:            UART_Write_Text ("\n\r");
   745  0761  301B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   746  0762  00F1               	movwf	UART_Write_Text@text
   747  0763  3080               	movlw	128
   748  0764  00F2               	movwf	UART_Write_Text@text+1
   749  0765  120A  118A  2407  120A  118A  	fcall	_UART_Write_Text
   750  076A                     l1334:
   751                           
   752                           ;newmain.c: 56:            _delay((unsigned long)((1)*(8000000/4000.0)));
   753  076A  3003               	movlw	3
   754  076B  1283               	bcf	3,5	;RP0=0, select bank0
   755  076C  1303               	bcf	3,6	;RP1=0, select bank0
   756  076D  00B7               	movwf	??_main+1
   757  076E  3097               	movlw	151
   758  076F  00B6               	movwf	??_main
   759  0770                     u997:
   760  0770  0BB6               	decfsz	??_main,f
   761  0771  2F70               	goto	u997
   762  0772  0BB7               	decfsz	??_main+1,f
   763  0773  2F70               	goto	u997
   764  0774                     l1336:
   765                           
   766                           ;newmain.c: 57:            RA1 = 1;
   767  0774  1283               	bcf	3,5	;RP0=0, select bank0
   768  0775  1303               	bcf	3,6	;RP1=0, select bank0
   769  0776  1485               	bsf	5,1	;volatile
   770  0777                     l1338:
   771                           
   772                           ;newmain.c: 58:            SSPIF = 0;
   773  0777  118C               	bcf	12,3	;volatile
   774  0778                     l1340:
   775                           
   776                           ;newmain.c: 62:        if (s1 == 1)
   777  0778  0343               	decf	main@s1,w
   778  0779  0444               	iorwf	main@s1+1,w
   779  077A  1D03               	btfss	3,2
   780  077B  2F7D               	goto	u951
   781  077C  2F7E               	goto	u950
   782  077D                     u951:
   783  077D  2FDF               	goto	l1364
   784  077E                     u950:
   785  077E                     l1342:
   786                           
   787                           ;newmain.c: 63:        {;newmain.c: 64:            RD0 = 1;
   788  077E  1408               	bsf	8,0	;volatile
   789                           
   790                           ;newmain.c: 65:            RA2 = 0;
   791  077F  1105               	bcf	5,2	;volatile
   792  0780                     l1344:
   793                           
   794                           ;newmain.c: 66:            _delay((unsigned long)((1)*(8000000/4000.0)));
   795  0780  3003               	movlw	3
   796  0781  1283               	bcf	3,5	;RP0=0, select bank0
   797  0782  1303               	bcf	3,6	;RP1=0, select bank0
   798  0783  00B7               	movwf	??_main+1
   799  0784  3097               	movlw	151
   800  0785  00B6               	movwf	??_main
   801  0786                     u1007:
   802  0786  0BB6               	decfsz	??_main,f
   803  0787  2F86               	goto	u1007
   804  0788  0BB7               	decfsz	??_main+1,f
   805  0789  2F86               	goto	u1007
   806  078A                     l1346:
   807                           
   808                           ;newmain.c: 68:            spiWrite(1);
   809  078A  3001               	movlw	1
   810  078B  120A  118A  2395  120A  118A  	fcall	_spiWrite
   811  0790                     l1348:
   812                           
   813                           ;newmain.c: 69:            s2 = spiRead();
   814  0790  120A  118A  23A2  120A  118A  	fcall	_spiRead
   815  0795  1283               	bcf	3,5	;RP0=0, select bank0
   816  0796  1303               	bcf	3,6	;RP1=0, select bank0
   817  0797  00B6               	movwf	??_main
   818  0798  01B7               	clrf	??_main+1
   819  0799  0836               	movf	??_main,w
   820  079A  00C5               	movwf	main@s2
   821  079B  0837               	movf	??_main+1,w
   822  079C  00C6               	movwf	main@s2+1
   823  079D                     l1350:
   824                           
   825                           ;newmain.c: 70:            sprintf (out, "%d\n", s2);
   826  079D  3017               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   827  079E  00B6               	movwf	??_main
   828  079F  0836               	movf	??_main,w
   829  07A0  00A0               	movwf	sprintf@f
   830  07A1  0846               	movf	main@s2+1,w
   831  07A2  00A2               	movwf	?_sprintf+2
   832  07A3  0845               	movf	main@s2,w
   833  07A4  00A1               	movwf	?_sprintf+1
   834  07A5  3039               	movlw	(low (main@out| 0))& (0+255)
   835  07A6  120A  118A  2604  120A  118A  	fcall	_sprintf
   836  07AB                     l1352:
   837                           
   838                           ;newmain.c: 71:            UART_Write_Text ("s2 = ");
   839  07AB  3011               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   840  07AC  00F1               	movwf	UART_Write_Text@text
   841  07AD  3080               	movlw	128
   842  07AE  00F2               	movwf	UART_Write_Text@text+1
   843  07AF  120A  118A  2407  120A  118A  	fcall	_UART_Write_Text
   844  07B4                     l1354:
   845                           
   846                           ;newmain.c: 72:            UART_Write_Text (out);
   847  07B4  3039               	movlw	(low (main@out| 0))& (0+255)
   848  07B5  00F1               	movwf	UART_Write_Text@text
   849  07B6  3000               	movlw	0
   850  07B7  00F2               	movwf	UART_Write_Text@text+1
   851  07B8  120A  118A  2407  120A  118A  	fcall	_UART_Write_Text
   852  07BD                     l1356:
   853                           
   854                           ;newmain.c: 73:            _delay((unsigned long)((90)*(8000000/4000.0)));
   855  07BD  30EA               	movlw	234
   856  07BE  1283               	bcf	3,5	;RP0=0, select bank0
   857  07BF  1303               	bcf	3,6	;RP1=0, select bank0
   858  07C0  00B7               	movwf	??_main+1
   859  07C1  30C2               	movlw	194
   860  07C2  00B6               	movwf	??_main
   861  07C3                     u1017:
   862  07C3  0BB6               	decfsz	??_main,f
   863  07C4  2FC3               	goto	u1017
   864  07C5  0BB7               	decfsz	??_main+1,f
   865  07C6  2FC3               	goto	u1017
   866  07C7  0000               	nop
   867                           
   868                           ;newmain.c: 74:            UART_Write_Text ("\n\r");
   869  07C8  301B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   870  07C9  00F1               	movwf	UART_Write_Text@text
   871  07CA  3080               	movlw	128
   872  07CB  00F2               	movwf	UART_Write_Text@text+1
   873  07CC  120A  118A  2407  120A  118A  	fcall	_UART_Write_Text
   874  07D1                     l1358:
   875                           
   876                           ;newmain.c: 76:            _delay((unsigned long)((1)*(8000000/4000.0)));
   877  07D1  3003               	movlw	3
   878  07D2  1283               	bcf	3,5	;RP0=0, select bank0
   879  07D3  1303               	bcf	3,6	;RP1=0, select bank0
   880  07D4  00B7               	movwf	??_main+1
   881  07D5  3097               	movlw	151
   882  07D6  00B6               	movwf	??_main
   883  07D7                     u1027:
   884  07D7  0BB6               	decfsz	??_main,f
   885  07D8  2FD7               	goto	u1027
   886  07D9  0BB7               	decfsz	??_main+1,f
   887  07DA  2FD7               	goto	u1027
   888  07DB                     l1360:
   889                           
   890                           ;newmain.c: 77:            RA2 = 1;
   891  07DB  1283               	bcf	3,5	;RP0=0, select bank0
   892  07DC  1303               	bcf	3,6	;RP1=0, select bank0
   893  07DD  1505               	bsf	5,2	;volatile
   894  07DE                     l1362:
   895                           
   896                           ;newmain.c: 78:            SSPIF = 0;
   897  07DE  118C               	bcf	12,3	;volatile
   898  07DF                     l1364:
   899                           
   900                           ;newmain.c: 82:        if (s2 == 1)
   901  07DF  0345               	decf	main@s2,w
   902  07E0  0446               	iorwf	main@s2+1,w
   903  07E1  1D03               	btfss	3,2
   904  07E2  2FE4               	goto	u961
   905  07E3  2FE5               	goto	u960
   906  07E4                     u961:
   907  07E4  2F0E               	goto	l1312
   908  07E5                     u960:
   909  07E5                     l1366:
   910                           
   911                           ;newmain.c: 83:        {;newmain.c: 84:            RD0 = 0;
   912  07E5  1008               	bcf	8,0	;volatile
   913                           
   914                           ;newmain.c: 85:            RD1 = 1;
   915  07E6  1488               	bsf	8,1	;volatile
   916  07E7                     l1368:
   917                           
   918                           ;newmain.c: 86:            _delay((unsigned long)((1000)*(8000000/4000.0)));
   919  07E7  300B               	movlw	11
   920  07E8  1283               	bcf	3,5	;RP0=0, select bank0
   921  07E9  1303               	bcf	3,6	;RP1=0, select bank0
   922  07EA  00B8               	movwf	??_main+2
   923  07EB  3026               	movlw	38
   924  07EC  00B7               	movwf	??_main+1
   925  07ED  305D               	movlw	93
   926  07EE  00B6               	movwf	??_main
   927  07EF                     u1037:
   928  07EF  0BB6               	decfsz	??_main,f
   929  07F0  2FEF               	goto	u1037
   930  07F1  0BB7               	decfsz	??_main+1,f
   931  07F2  2FEF               	goto	u1037
   932  07F3  0BB8               	decfsz	??_main+2,f
   933  07F4  2FEF               	goto	u1037
   934  07F5                     l1370:
   935                           
   936                           ;newmain.c: 87:            RD1 = 0;
   937  07F5  1283               	bcf	3,5	;RP0=0, select bank0
   938  07F6  1303               	bcf	3,6	;RP1=0, select bank0
   939  07F7  1088               	bcf	8,1	;volatile
   940  07F8  2F0E               	goto	l1312
   941  07F9  120A  118A  2800   	ljmp	start
   942  07FC                     __end_of_main:
   943                           
   944                           	psect	text1
   945  0604                     __ptext1:	
   946 ;; *************** function _sprintf *****************
   947 ;; Defined at:
   948 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
   949 ;; Parameters:    Size  Location     Type
   950 ;;  sp              1    wreg     PTR unsigned char 
   951 ;;		 -> main@out(10), 
   952 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   953 ;;		 -> STR_4(4), STR_1(4), 
   954 ;; Auto vars:     Size  Location     Type
   955 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   956 ;;		 -> main@out(10), 
   957 ;;  tmpval          4    0        struct .
   958 ;;  val             2    9[BANK0 ] unsigned int 
   959 ;;  cp              2    0        PTR const unsigned char 
   960 ;;  len             2    0        unsigned int 
   961 ;;  c               1   12[BANK0 ] unsigned char 
   962 ;;  prec            1    8[BANK0 ] char 
   963 ;;  flag            1    7[BANK0 ] unsigned char 
   964 ;;  ap              1    6[BANK0 ] PTR void [1]
   965 ;;		 -> ?_sprintf(2), 
   966 ;; Return value:  Size  Location     Type
   967 ;;                  2    0[BANK0 ] int 
   968 ;; Registers used:
   969 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   970 ;; Tracked objects:
   971 ;;		On entry : 0/0
   972 ;;		On exit  : 0/0
   973 ;;		Unchanged: 0/0
   974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   975 ;;      Params:         0       3       0       0       0
   976 ;;      Locals:         0       7       0       0       0
   977 ;;      Temps:          0       3       0       0       0
   978 ;;      Totals:         0      13       0       0       0
   979 ;;Total ram usage:       13 bytes
   980 ;; Hardware stack levels used: 1
   981 ;; Hardware stack levels required when called: 1
   982 ;; This function calls:
   983 ;;		___lwdiv
   984 ;;		___lwmod
   985 ;; This function is called by:
   986 ;;		_main
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           
   991                           ;psect for function _sprintf
   992  0604                     _sprintf:
   993                           
   994                           ;incstack = 0
   995                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   996                           ;sprintf@sp stored from wreg
   997  0604  1283               	bcf	3,5	;RP0=0, select bank0
   998  0605  1303               	bcf	3,6	;RP1=0, select bank0
   999  0606  00AB               	movwf	sprintf@sp
  1000  0607                     l1232:
  1001                           
  1002                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1003  0607  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1004  0608  00A3               	movwf	??_sprintf
  1005  0609  0823               	movf	??_sprintf,w
  1006  060A  00A6               	movwf	sprintf@ap
  1007                           
  1008                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1009  060B  2ED5               	goto	l1284
  1010  060C                     l1234:
  1011                           
  1012                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1013  060C  3025               	movlw	37
  1014  060D  062C               	xorwf	sprintf@c,w
  1015  060E  1903               	btfsc	3,2
  1016  060F  2E11               	goto	u871
  1017  0610  2E12               	goto	u870
  1018  0611                     u871:
  1019  0611  2E1E               	goto	l1240
  1020  0612                     u870:
  1021  0612                     l1236:
  1022                           
  1023                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1024  0612  082C               	movf	sprintf@c,w
  1025  0613  00A3               	movwf	??_sprintf
  1026  0614  082B               	movf	sprintf@sp,w
  1027  0615  0084               	movwf	4
  1028  0616  0823               	movf	??_sprintf,w
  1029  0617  1383               	bcf	3,7	;select IRP bank0
  1030  0618  0080               	movwf	0
  1031  0619                     l1238:
  1032  0619  3001               	movlw	1
  1033  061A  00A3               	movwf	??_sprintf
  1034  061B  0823               	movf	??_sprintf,w
  1035  061C  07AB               	addwf	sprintf@sp,f
  1036                           
  1037                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 559:    continue;
  1038  061D  2ED5               	goto	l1284
  1039  061E                     l1240:
  1040                           
  1041                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1042  061E  01A7               	clrf	sprintf@flag
  1043  061F                     l1244:	
  1044                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1045                           
  1046  061F  3001               	movlw	1
  1047  0620  07A0               	addwf	sprintf@f,f
  1048  0621  30FF               	movlw	-1
  1049  0622  0720               	addwf	sprintf@f,w
  1050  0623  0084               	movwf	4
  1051  0624  120A  118A  200D  120A  118A  	fcall	stringdir
  1052  0629  00AC               	movwf	sprintf@c
  1053  062A  00A3               	movwf	??_sprintf
  1054  062B  01A4               	clrf	??_sprintf+1
  1055                           
  1056                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1057                           ; Switch size 1, requested type "simple"
  1058                           ; Number of cases is 1, Range of values is 0 to 0
  1059                           ; switch strategies available:
  1060                           ; Name         Instructions Cycles
  1061                           ; simple_byte            4     3 (average)
  1062                           ; direct_byte           11     8 (fixed)
  1063                           ; jumptable            260     6 (fixed)
  1064                           ;	Chosen strategy is simple_byte
  1065  062C  0824               	movf	??_sprintf+1,w
  1066  062D  3A00               	xorlw	0	; case 0
  1067  062E  1903               	skipnz
  1068  062F  2E31               	goto	l1392
  1069  0630  2ED5               	goto	l1284
  1070  0631                     l1392:
  1071                           
  1072                           ; Switch size 1, requested type "simple"
  1073                           ; Number of cases is 3, Range of values is 0 to 105
  1074                           ; switch strategies available:
  1075                           ; Name         Instructions Cycles
  1076                           ; simple_byte           10     6 (average)
  1077                           ; jumptable            260     6 (fixed)
  1078                           ;	Chosen strategy is simple_byte
  1079  0631  0823               	movf	??_sprintf,w
  1080  0632  3A00               	xorlw	0	; case 0
  1081  0633  1903               	skipnz
  1082  0634  2EE7               	goto	l1286
  1083  0635  3A64               	xorlw	100	; case 100
  1084  0636  1903               	skipnz
  1085  0637  2E3C               	goto	l1246
  1086  0638  3A0D               	xorlw	13	; case 105
  1087  0639  1903               	skipnz
  1088  063A  2E3C               	goto	l1246
  1089  063B  2ED5               	goto	l1284
  1090  063C                     l1246:
  1091                           
  1092                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1093  063C  0826               	movf	sprintf@ap,w
  1094  063D  0084               	movwf	4
  1095  063E  1383               	bcf	3,7	;select IRP bank0
  1096  063F  0800               	movf	0,w
  1097  0640  00A9               	movwf	sprintf@val
  1098  0641  0A84               	incf	4,f
  1099  0642  0800               	movf	0,w
  1100  0643  00AA               	movwf	sprintf@val+1
  1101  0644                     l1248:
  1102  0644  3002               	movlw	2
  1103  0645  00A3               	movwf	??_sprintf
  1104  0646  0823               	movf	??_sprintf,w
  1105  0647  07A6               	addwf	sprintf@ap,f
  1106  0648                     l1250:
  1107                           
  1108                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1109  0648  1FAA               	btfss	sprintf@val+1,7
  1110  0649  2E4B               	goto	u881
  1111  064A  2E4C               	goto	u880
  1112  064B                     u881:
  1113  064B  2E55               	goto	l1256
  1114  064C                     u880:
  1115  064C                     l1252:
  1116                           
  1117                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1118  064C  3003               	movlw	3
  1119  064D  00A3               	movwf	??_sprintf
  1120  064E  0823               	movf	??_sprintf,w
  1121  064F  04A7               	iorwf	sprintf@flag,f
  1122  0650                     l1254:
  1123                           
  1124                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1125  0650  09A9               	comf	sprintf@val,f
  1126  0651  09AA               	comf	sprintf@val+1,f
  1127  0652  0AA9               	incf	sprintf@val,f
  1128  0653  1903               	skipnz
  1129  0654  0AAA               	incf	sprintf@val+1,f
  1130  0655                     l1256:
  1131                           
  1132                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1133  0655  01AC               	clrf	sprintf@c
  1134  0656  0AAC               	incf	sprintf@c,f
  1135  0657                     l1262:
  1136                           
  1137                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1138  0657  082C               	movf	sprintf@c,w
  1139  0658  00A3               	movwf	??_sprintf
  1140  0659  0723               	addwf	??_sprintf,w
  1141  065A  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1142  065B  0084               	movwf	4
  1143  065C  120A  118A  200D  120A  118A  	fcall	stringdir
  1144  0661  00A4               	movwf	??_sprintf+1
  1145  0662  120A  118A  200D  120A  118A  	fcall	stringdir
  1146  0667  00A5               	movwf	??_sprintf+2
  1147  0668  0825               	movf	??_sprintf+2,w
  1148  0669  022A               	subwf	sprintf@val+1,w
  1149  066A  1D03               	skipz
  1150  066B  2E6E               	goto	u895
  1151  066C  0824               	movf	??_sprintf+1,w
  1152  066D  0229               	subwf	sprintf@val,w
  1153  066E                     u895:
  1154  066E  1803               	skipnc
  1155  066F  2E71               	goto	u891
  1156  0670  2E72               	goto	u890
  1157  0671                     u891:
  1158  0671  2E73               	goto	l1266
  1159  0672                     u890:
  1160  0672  2E7D               	goto	l1268
  1161  0673                     l1266:
  1162  0673  3001               	movlw	1
  1163  0674  00A3               	movwf	??_sprintf
  1164  0675  0823               	movf	??_sprintf,w
  1165  0676  07AC               	addwf	sprintf@c,f
  1166  0677  3005               	movlw	5
  1167  0678  062C               	xorwf	sprintf@c,w
  1168  0679  1D03               	btfss	3,2
  1169  067A  2E7C               	goto	u901
  1170  067B  2E7D               	goto	u900
  1171  067C                     u901:
  1172  067C  2E57               	goto	l1262
  1173  067D                     u900:
  1174  067D                     l1268:
  1175                           
  1176                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1177  067D  0827               	movf	sprintf@flag,w
  1178  067E  3903               	andlw	3
  1179  067F  1903               	btfsc	3,2
  1180  0680  2E82               	goto	u911
  1181  0681  2E83               	goto	u910
  1182  0682                     u911:
  1183  0682  2E8E               	goto	l1274
  1184  0683                     u910:
  1185  0683                     l1270:
  1186                           
  1187                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1188  0683  302D               	movlw	45
  1189  0684  00A3               	movwf	??_sprintf
  1190  0685  082B               	movf	sprintf@sp,w
  1191  0686  0084               	movwf	4
  1192  0687  0823               	movf	??_sprintf,w
  1193  0688  1383               	bcf	3,7	;select IRP bank0
  1194  0689  0080               	movwf	0
  1195  068A                     l1272:
  1196  068A  3001               	movlw	1
  1197  068B  00A3               	movwf	??_sprintf
  1198  068C  0823               	movf	??_sprintf,w
  1199  068D  07AB               	addwf	sprintf@sp,f
  1200  068E                     l1274:
  1201                           
  1202                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1203  068E  082C               	movf	sprintf@c,w
  1204  068F  00A3               	movwf	??_sprintf
  1205  0690  0823               	movf	??_sprintf,w
  1206  0691  00A8               	movwf	sprintf@prec
  1207                           
  1208                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1209  0692  2ECC               	goto	l1282
  1210  0693                     l1276:
  1211                           
  1212                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1213  0693  300A               	movlw	10
  1214  0694  00F8               	movwf	___lwmod@divisor
  1215  0695  3000               	movlw	0
  1216  0696  00F9               	movwf	___lwmod@divisor+1
  1217  0697  0828               	movf	sprintf@prec,w
  1218  0698  00A3               	movwf	??_sprintf
  1219  0699  0723               	addwf	??_sprintf,w
  1220  069A  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1221  069B  0084               	movwf	4
  1222  069C  120A  118A  200D  120A  118A  	fcall	stringdir
  1223  06A1  00F0               	movwf	___lwdiv@divisor
  1224  06A2  120A  118A  200D  120A  118A  	fcall	stringdir
  1225  06A7  00F1               	movwf	___lwdiv@divisor+1
  1226  06A8  082A               	movf	sprintf@val+1,w
  1227  06A9  00F3               	movwf	___lwdiv@dividend+1
  1228  06AA  0829               	movf	sprintf@val,w
  1229  06AB  00F2               	movwf	___lwdiv@dividend
  1230  06AC  120A  118A  2449  120A  118A  	fcall	___lwdiv
  1231  06B1  0871               	movf	?___lwdiv+1,w
  1232  06B2  00FB               	movwf	___lwmod@dividend+1
  1233  06B3  0870               	movf	?___lwdiv,w
  1234  06B4  00FA               	movwf	___lwmod@dividend
  1235  06B5  120A  118A  23CD  120A  118A  	fcall	___lwmod
  1236  06BA  0878               	movf	?___lwmod,w
  1237  06BB  3E30               	addlw	48
  1238  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  1239  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  1240  06BE  00A4               	movwf	??_sprintf+1
  1241  06BF  0824               	movf	??_sprintf+1,w
  1242  06C0  00AC               	movwf	sprintf@c
  1243  06C1                     l1278:
  1244                           
  1245                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1246  06C1  082C               	movf	sprintf@c,w
  1247  06C2  00A3               	movwf	??_sprintf
  1248  06C3  082B               	movf	sprintf@sp,w
  1249  06C4  0084               	movwf	4
  1250  06C5  0823               	movf	??_sprintf,w
  1251  06C6  1383               	bcf	3,7	;select IRP bank0
  1252  06C7  0080               	movwf	0
  1253  06C8                     l1280:
  1254  06C8  3001               	movlw	1
  1255  06C9  00A3               	movwf	??_sprintf
  1256  06CA  0823               	movf	??_sprintf,w
  1257  06CB  07AB               	addwf	sprintf@sp,f
  1258  06CC                     l1282:
  1259                           
  1260                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1261  06CC  30FF               	movlw	255
  1262  06CD  00A3               	movwf	??_sprintf
  1263  06CE  0823               	movf	??_sprintf,w
  1264  06CF  07A8               	addwf	sprintf@prec,f
  1265  06D0  0A28               	incf	sprintf@prec,w
  1266  06D1  1D03               	btfss	3,2
  1267  06D2  2ED4               	goto	u921
  1268  06D3  2ED5               	goto	u920
  1269  06D4                     u921:
  1270  06D4  2E93               	goto	l1276
  1271  06D5                     u920:
  1272  06D5                     l1284:
  1273                           
  1274                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1275  06D5  3001               	movlw	1
  1276  06D6  07A0               	addwf	sprintf@f,f
  1277  06D7  30FF               	movlw	-1
  1278  06D8  0720               	addwf	sprintf@f,w
  1279  06D9  0084               	movwf	4
  1280  06DA  120A  118A  200D  120A  118A  	fcall	stringdir
  1281  06DF  00A3               	movwf	??_sprintf
  1282  06E0  0823               	movf	??_sprintf,w
  1283  06E1  00AC               	movwf	sprintf@c
  1284  06E2  082C               	movf	sprintf@c,w
  1285  06E3  1D03               	btfss	3,2
  1286  06E4  2EE6               	goto	u931
  1287  06E5  2EE7               	goto	u930
  1288  06E6                     u931:
  1289  06E6  2E0C               	goto	l1234
  1290  06E7                     u930:
  1291  06E7                     l1286:
  1292                           
  1293                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1294  06E7  082B               	movf	sprintf@sp,w
  1295  06E8  0084               	movwf	4
  1296  06E9  1383               	bcf	3,7	;select IRP bank0
  1297  06EA  0180               	clrf	0
  1298  06EB                     l246:
  1299  06EB  0008               	return
  1300  06EC                     __end_of_sprintf:
  1301                           
  1302                           	psect	text2
  1303  03CD                     __ptext2:	
  1304 ;; *************** function ___lwmod *****************
  1305 ;; Defined at:
  1306 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;  divisor         2    8[COMMON] unsigned int 
  1309 ;;  dividend        2   10[COMMON] unsigned int 
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;  counter         1   13[COMMON] unsigned char 
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  2    8[COMMON] unsigned int 
  1314 ;; Registers used:
  1315 ;;		wreg, status,2, status,0
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1321 ;;      Params:         4       0       0       0       0
  1322 ;;      Locals:         1       0       0       0       0
  1323 ;;      Temps:          1       0       0       0       0
  1324 ;;      Totals:         6       0       0       0       0
  1325 ;;Total ram usage:        6 bytes
  1326 ;; Hardware stack levels used: 1
  1327 ;; This function calls:
  1328 ;;		Nothing
  1329 ;; This function is called by:
  1330 ;;		_sprintf
  1331 ;; This function uses a non-reentrant model
  1332 ;;
  1333                           
  1334                           
  1335                           ;psect for function ___lwmod
  1336  03CD                     ___lwmod:
  1337  03CD                     l1158:	
  1338                           ;incstack = 0
  1339                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1340                           
  1341  03CD  0878               	movf	___lwmod@divisor,w
  1342  03CE  0479               	iorwf	___lwmod@divisor+1,w
  1343  03CF  1903               	btfsc	3,2
  1344  03D0  2BD2               	goto	u691
  1345  03D1  2BD3               	goto	u690
  1346  03D2                     u691:
  1347  03D2  2C02               	goto	l1176
  1348  03D3                     u690:
  1349  03D3                     l1160:
  1350  03D3  01FD               	clrf	___lwmod@counter
  1351  03D4  0AFD               	incf	___lwmod@counter,f
  1352  03D5  2BE1               	goto	l1166
  1353  03D6                     l1162:
  1354  03D6  3001               	movlw	1
  1355  03D7                     u705:
  1356  03D7  1003               	clrc
  1357  03D8  0DF8               	rlf	___lwmod@divisor,f
  1358  03D9  0DF9               	rlf	___lwmod@divisor+1,f
  1359  03DA  3EFF               	addlw	-1
  1360  03DB  1D03               	skipz
  1361  03DC  2BD7               	goto	u705
  1362  03DD                     l1164:
  1363  03DD  3001               	movlw	1
  1364  03DE  00FC               	movwf	??___lwmod
  1365  03DF  087C               	movf	??___lwmod,w
  1366  03E0  07FD               	addwf	___lwmod@counter,f
  1367  03E1                     l1166:
  1368  03E1  1FF9               	btfss	___lwmod@divisor+1,7
  1369  03E2  2BE4               	goto	u711
  1370  03E3  2BE5               	goto	u710
  1371  03E4                     u711:
  1372  03E4  2BD6               	goto	l1162
  1373  03E5                     u710:
  1374  03E5                     l1168:
  1375  03E5  0879               	movf	___lwmod@divisor+1,w
  1376  03E6  027B               	subwf	___lwmod@dividend+1,w
  1377  03E7  1D03               	skipz
  1378  03E8  2BEB               	goto	u725
  1379  03E9  0878               	movf	___lwmod@divisor,w
  1380  03EA  027A               	subwf	___lwmod@dividend,w
  1381  03EB                     u725:
  1382  03EB  1C03               	skipc
  1383  03EC  2BEE               	goto	u721
  1384  03ED  2BEF               	goto	u720
  1385  03EE                     u721:
  1386  03EE  2BF5               	goto	l1172
  1387  03EF                     u720:
  1388  03EF                     l1170:
  1389  03EF  0878               	movf	___lwmod@divisor,w
  1390  03F0  02FA               	subwf	___lwmod@dividend,f
  1391  03F1  0879               	movf	___lwmod@divisor+1,w
  1392  03F2  1C03               	skipc
  1393  03F3  03FB               	decf	___lwmod@dividend+1,f
  1394  03F4  02FB               	subwf	___lwmod@dividend+1,f
  1395  03F5                     l1172:
  1396  03F5  3001               	movlw	1
  1397  03F6                     u735:
  1398  03F6  1003               	clrc
  1399  03F7  0CF9               	rrf	___lwmod@divisor+1,f
  1400  03F8  0CF8               	rrf	___lwmod@divisor,f
  1401  03F9  3EFF               	addlw	-1
  1402  03FA  1D03               	skipz
  1403  03FB  2BF6               	goto	u735
  1404  03FC                     l1174:
  1405  03FC  3001               	movlw	1
  1406  03FD  02FD               	subwf	___lwmod@counter,f
  1407  03FE  1D03               	btfss	3,2
  1408  03FF  2C01               	goto	u741
  1409  0400  2C02               	goto	u740
  1410  0401                     u741:
  1411  0401  2BE5               	goto	l1168
  1412  0402                     u740:
  1413  0402                     l1176:
  1414  0402  087B               	movf	___lwmod@dividend+1,w
  1415  0403  00F9               	movwf	?___lwmod+1
  1416  0404  087A               	movf	___lwmod@dividend,w
  1417  0405  00F8               	movwf	?___lwmod
  1418  0406                     l532:
  1419  0406  0008               	return
  1420  0407                     __end_of___lwmod:
  1421                           
  1422                           	psect	text3
  1423  0449                     __ptext3:	
  1424 ;; *************** function ___lwdiv *****************
  1425 ;; Defined at:
  1426 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;  divisor         2    0[COMMON] unsigned int 
  1429 ;;  dividend        2    2[COMMON] unsigned int 
  1430 ;; Auto vars:     Size  Location     Type
  1431 ;;  quotient        2    5[COMMON] unsigned int 
  1432 ;;  counter         1    7[COMMON] unsigned char 
  1433 ;; Return value:  Size  Location     Type
  1434 ;;                  2    0[COMMON] unsigned int 
  1435 ;; Registers used:
  1436 ;;		wreg, status,2, status,0
  1437 ;; Tracked objects:
  1438 ;;		On entry : 0/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1442 ;;      Params:         4       0       0       0       0
  1443 ;;      Locals:         3       0       0       0       0
  1444 ;;      Temps:          1       0       0       0       0
  1445 ;;      Totals:         8       0       0       0       0
  1446 ;;Total ram usage:        8 bytes
  1447 ;; Hardware stack levels used: 1
  1448 ;; This function calls:
  1449 ;;		Nothing
  1450 ;; This function is called by:
  1451 ;;		_sprintf
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454                           
  1455                           
  1456                           ;psect for function ___lwdiv
  1457  0449                     ___lwdiv:
  1458  0449                     l1132:	
  1459                           ;incstack = 0
  1460                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1461                           
  1462  0449  01F5               	clrf	___lwdiv@quotient
  1463  044A  01F6               	clrf	___lwdiv@quotient+1
  1464  044B                     l1134:
  1465  044B  0870               	movf	___lwdiv@divisor,w
  1466  044C  0471               	iorwf	___lwdiv@divisor+1,w
  1467  044D  1903               	btfsc	3,2
  1468  044E  2C50               	goto	u621
  1469  044F  2C51               	goto	u620
  1470  0450                     u621:
  1471  0450  2C88               	goto	l1154
  1472  0451                     u620:
  1473  0451                     l1136:
  1474  0451  01F7               	clrf	___lwdiv@counter
  1475  0452  0AF7               	incf	___lwdiv@counter,f
  1476  0453  2C5F               	goto	l1142
  1477  0454                     l1138:
  1478  0454  3001               	movlw	1
  1479  0455                     u635:
  1480  0455  1003               	clrc
  1481  0456  0DF0               	rlf	___lwdiv@divisor,f
  1482  0457  0DF1               	rlf	___lwdiv@divisor+1,f
  1483  0458  3EFF               	addlw	-1
  1484  0459  1D03               	skipz
  1485  045A  2C55               	goto	u635
  1486  045B                     l1140:
  1487  045B  3001               	movlw	1
  1488  045C  00F4               	movwf	??___lwdiv
  1489  045D  0874               	movf	??___lwdiv,w
  1490  045E  07F7               	addwf	___lwdiv@counter,f
  1491  045F                     l1142:
  1492  045F  1FF1               	btfss	___lwdiv@divisor+1,7
  1493  0460  2C62               	goto	u641
  1494  0461  2C63               	goto	u640
  1495  0462                     u641:
  1496  0462  2C54               	goto	l1138
  1497  0463                     u640:
  1498  0463                     l1144:
  1499  0463  3001               	movlw	1
  1500  0464                     u655:
  1501  0464  1003               	clrc
  1502  0465  0DF5               	rlf	___lwdiv@quotient,f
  1503  0466  0DF6               	rlf	___lwdiv@quotient+1,f
  1504  0467  3EFF               	addlw	-1
  1505  0468  1D03               	skipz
  1506  0469  2C64               	goto	u655
  1507  046A  0871               	movf	___lwdiv@divisor+1,w
  1508  046B  0273               	subwf	___lwdiv@dividend+1,w
  1509  046C  1D03               	skipz
  1510  046D  2C70               	goto	u665
  1511  046E  0870               	movf	___lwdiv@divisor,w
  1512  046F  0272               	subwf	___lwdiv@dividend,w
  1513  0470                     u665:
  1514  0470  1C03               	skipc
  1515  0471  2C73               	goto	u661
  1516  0472  2C74               	goto	u660
  1517  0473                     u661:
  1518  0473  2C7B               	goto	l1150
  1519  0474                     u660:
  1520  0474                     l1146:
  1521  0474  0870               	movf	___lwdiv@divisor,w
  1522  0475  02F2               	subwf	___lwdiv@dividend,f
  1523  0476  0871               	movf	___lwdiv@divisor+1,w
  1524  0477  1C03               	skipc
  1525  0478  03F3               	decf	___lwdiv@dividend+1,f
  1526  0479  02F3               	subwf	___lwdiv@dividend+1,f
  1527  047A                     l1148:
  1528  047A  1475               	bsf	___lwdiv@quotient,0
  1529  047B                     l1150:
  1530  047B  3001               	movlw	1
  1531  047C                     u675:
  1532  047C  1003               	clrc
  1533  047D  0CF1               	rrf	___lwdiv@divisor+1,f
  1534  047E  0CF0               	rrf	___lwdiv@divisor,f
  1535  047F  3EFF               	addlw	-1
  1536  0480  1D03               	skipz
  1537  0481  2C7C               	goto	u675
  1538  0482                     l1152:
  1539  0482  3001               	movlw	1
  1540  0483  02F7               	subwf	___lwdiv@counter,f
  1541  0484  1D03               	btfss	3,2
  1542  0485  2C87               	goto	u681
  1543  0486  2C88               	goto	u680
  1544  0487                     u681:
  1545  0487  2C63               	goto	l1144
  1546  0488                     u680:
  1547  0488                     l1154:
  1548  0488  0876               	movf	___lwdiv@quotient+1,w
  1549  0489  00F1               	movwf	?___lwdiv+1
  1550  048A  0875               	movf	___lwdiv@quotient,w
  1551  048B  00F0               	movwf	?___lwdiv
  1552  048C                     l522:
  1553  048C  0008               	return
  1554  048D                     __end_of___lwdiv:
  1555                           
  1556                           	psect	text4
  1557  0395                     __ptext4:	
  1558 ;; *************** function _spiWrite *****************
  1559 ;; Defined at:
  1560 ;;		line 34 in file "spi.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;  dat             1    wreg     unsigned char 
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  dat             1    0[COMMON] unsigned char 
  1565 ;; Return value:  Size  Location     Type
  1566 ;;                  1    wreg      void 
  1567 ;; Registers used:
  1568 ;;		wreg
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1574 ;;      Params:         0       0       0       0       0
  1575 ;;      Locals:         1       0       0       0       0
  1576 ;;      Temps:          0       0       0       0       0
  1577 ;;      Totals:         1       0       0       0       0
  1578 ;;Total ram usage:        1 bytes
  1579 ;; Hardware stack levels used: 1
  1580 ;; This function calls:
  1581 ;;		Nothing
  1582 ;; This function is called by:
  1583 ;;		_main
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           
  1588                           ;psect for function _spiWrite
  1589  0395                     _spiWrite:
  1590                           
  1591                           ;incstack = 0
  1592                           ; Regs used in _spiWrite: [wreg]
  1593                           ;spiWrite@dat stored from wreg
  1594  0395  00F0               	movwf	spiWrite@dat
  1595  0396                     l1224:
  1596                           
  1597                           ;spi.c: 34: void spiWrite(char dat);spi.c: 35: {;spi.c: 36:     SSPBUF = dat;
  1598  0396  0870               	movf	spiWrite@dat,w
  1599  0397  1283               	bcf	3,5	;RP0=0, select bank0
  1600  0398  1303               	bcf	3,6	;RP1=0, select bank0
  1601  0399  0093               	movwf	19	;volatile
  1602  039A                     l128:
  1603  039A  0008               	return
  1604  039B                     __end_of_spiWrite:
  1605                           
  1606                           	psect	text5
  1607  03A2                     __ptext5:	
  1608 ;; *************** function _spiRead *****************
  1609 ;; Defined at:
  1610 ;;		line 47 in file "spi.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      unsigned char 
  1617 ;; Registers used:
  1618 ;;		wreg, status,2, status,0, pclath, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1624 ;;      Params:         0       0       0       0       0
  1625 ;;      Locals:         0       0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0
  1627 ;;      Totals:         0       0       0       0       0
  1628 ;;Total ram usage:        0 bytes
  1629 ;; Hardware stack levels used: 1
  1630 ;; Hardware stack levels required when called: 1
  1631 ;; This function calls:
  1632 ;;		_spiReceiveWait
  1633 ;; This function is called by:
  1634 ;;		_main
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           
  1639                           ;psect for function _spiRead
  1640  03A2                     _spiRead:
  1641  03A2                     l1226:	
  1642                           ;incstack = 0
  1643                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1644                           
  1645                           
  1646                           ;spi.c: 49:     spiReceiveWait();
  1647  03A2  120A  118A  239B  120A  118A  	fcall	_spiReceiveWait
  1648  03A7                     l1228:
  1649                           
  1650                           ;spi.c: 50:     return(SSPBUF);
  1651  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  1652  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  1653  03A9  0813               	movf	19,w	;volatile
  1654  03AA                     l136:
  1655  03AA  0008               	return
  1656  03AB                     __end_of_spiRead:
  1657                           
  1658                           	psect	text6
  1659  039B                     __ptext6:	
  1660 ;; *************** function _spiReceiveWait *****************
  1661 ;; Defined at:
  1662 ;;		line 29 in file "spi.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;		None
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;		None
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      void 
  1669 ;; Registers used:
  1670 ;;		None
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1676 ;;      Params:         0       0       0       0       0
  1677 ;;      Locals:         0       0       0       0       0
  1678 ;;      Temps:          0       0       0       0       0
  1679 ;;      Totals:         0       0       0       0       0
  1680 ;;Total ram usage:        0 bytes
  1681 ;; Hardware stack levels used: 1
  1682 ;; This function calls:
  1683 ;;		Nothing
  1684 ;; This function is called by:
  1685 ;;		_spiRead
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           
  1690                           ;psect for function _spiReceiveWait
  1691  039B                     _spiReceiveWait:
  1692  039B                     l1090:	
  1693                           ;incstack = 0
  1694                           ; Regs used in _spiReceiveWait: []
  1695                           
  1696  039B                     l122:	
  1697                           ;spi.c: 31:     while ( !SSPSTATbits.BF );
  1698                           
  1699  039B  1683               	bsf	3,5	;RP0=1, select bank1
  1700  039C  1303               	bcf	3,6	;RP1=0, select bank1
  1701  039D  1C14               	btfss	20,0	;volatile
  1702  039E  2BA0               	goto	u511
  1703  039F  2BA1               	goto	u510
  1704  03A0                     u511:
  1705  03A0  2B9B               	goto	l122
  1706  03A1                     u510:
  1707  03A1                     l125:
  1708  03A1  0008               	return
  1709  03A2                     __end_of_spiReceiveWait:
  1710                           
  1711                           	psect	text7
  1712  03B7                     __ptext7:	
  1713 ;; *************** function _spiInit *****************
  1714 ;; Defined at:
  1715 ;;		line 12 in file "spi.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;  sType           1    wreg     enum E850
  1718 ;;  sDataSample     1    0[COMMON] enum E858
  1719 ;;  sClockIdle      1    1[COMMON] enum E862
  1720 ;;  sTransmitEdg    1    2[COMMON] enum E866
  1721 ;; Auto vars:     Size  Location     Type
  1722 ;;  sType           1    3[COMMON] enum E850
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  1    wreg      void 
  1725 ;; Registers used:
  1726 ;;		wreg, status,2, status,0
  1727 ;; Tracked objects:
  1728 ;;		On entry : 0/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1732 ;;      Params:         3       0       0       0       0
  1733 ;;      Locals:         1       0       0       0       0
  1734 ;;      Temps:          0       0       0       0       0
  1735 ;;      Totals:         4       0       0       0       0
  1736 ;;Total ram usage:        4 bytes
  1737 ;; Hardware stack levels used: 1
  1738 ;; This function calls:
  1739 ;;		Nothing
  1740 ;; This function is called by:
  1741 ;;		_main
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           
  1746                           ;psect for function _spiInit
  1747  03B7                     _spiInit:
  1748                           
  1749                           ;incstack = 0
  1750                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1751                           ;spiInit@sType stored from wreg
  1752  03B7  00F3               	movwf	spiInit@sType
  1753  03B8                     l1214:
  1754                           
  1755                           ;spi.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);spi.c: 13: {;spi.c: 14:     TRISC5 = 0;
  1756  03B8  1683               	bsf	3,5	;RP0=1, select bank1
  1757  03B9  1303               	bcf	3,6	;RP1=0, select bank1
  1758  03BA  1287               	bcf	7,5	;volatile
  1759                           
  1760                           ;spi.c: 15:     if(sType & 0b00000100)
  1761  03BB  1D73               	btfss	spiInit@sType,2
  1762  03BC  2BBE               	goto	u861
  1763  03BD  2BBF               	goto	u860
  1764  03BE                     u861:
  1765  03BE  2BC3               	goto	l1220
  1766  03BF                     u860:
  1767  03BF                     l1216:
  1768                           
  1769                           ;spi.c: 16:     {;spi.c: 17:         SSPSTAT = sTransmitEdge;
  1770  03BF  0872               	movf	spiInit@sTransmitEdge,w
  1771  03C0  0094               	movwf	20	;volatile
  1772  03C1                     l1218:
  1773                           
  1774                           ;spi.c: 18:         TRISC3 = 1;
  1775  03C1  1587               	bsf	7,3	;volatile
  1776                           
  1777                           ;spi.c: 19:     }
  1778  03C2  2BC7               	goto	l118
  1779  03C3                     l1220:
  1780                           
  1781                           ;spi.c: 21:     {;spi.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  1782  03C3  0870               	movf	spiInit@sDataSample,w
  1783  03C4  0472               	iorwf	spiInit@sTransmitEdge,w
  1784  03C5  0094               	movwf	20	;volatile
  1785  03C6                     l1222:
  1786                           
  1787                           ;spi.c: 23:         TRISC3 = 0;
  1788  03C6  1187               	bcf	7,3	;volatile
  1789  03C7                     l118:	
  1790                           ;spi.c: 24:     }
  1791                           
  1792                           
  1793                           ;spi.c: 26:     SSPCON = sType | sClockIdle;
  1794  03C7  0873               	movf	spiInit@sType,w
  1795  03C8  0471               	iorwf	spiInit@sClockIdle,w
  1796  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  1797  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  1798  03CB  0094               	movwf	20	;volatile
  1799  03CC                     l119:
  1800  03CC  0008               	return
  1801  03CD                     __end_of_spiInit:
  1802                           
  1803                           	psect	text8
  1804  0407                     __ptext8:	
  1805 ;; *************** function _UART_Write_Text *****************
  1806 ;; Defined at:
  1807 ;;		line 53 in file "./uart.h"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;  text            2    1[COMMON] PTR unsigned char 
  1810 ;;		 -> STR_6(3), STR_5(6), STR_3(3), STR_2(6), 
  1811 ;;		 -> main@out(10), 
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;  i               2    6[COMMON] int 
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      void 
  1816 ;; Registers used:
  1817 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1823 ;;      Params:         2       0       0       0       0
  1824 ;;      Locals:         2       0       0       0       0
  1825 ;;      Temps:          3       0       0       0       0
  1826 ;;      Totals:         7       0       0       0       0
  1827 ;;Total ram usage:        7 bytes
  1828 ;; Hardware stack levels used: 1
  1829 ;; Hardware stack levels required when called: 1
  1830 ;; This function calls:
  1831 ;;		_UART_Write
  1832 ;; This function is called by:
  1833 ;;		_main
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           
  1838                           ;psect for function _UART_Write_Text
  1839  0407                     _UART_Write_Text:
  1840  0407                     l1206:	
  1841                           ;incstack = 0
  1842                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1843                           
  1844                           
  1845                           ;./uart.h: 53: void UART_Write_Text(char *text);./uart.h: 54: {;./uart.h: 55:   int i;;.
      +                          /uart.h: 56:   for(i=0;text[i]!='\0';i++)
  1846  0407  01F6               	clrf	UART_Write_Text@i
  1847  0408  01F7               	clrf	UART_Write_Text@i+1
  1848  0409  2C2C               	goto	l1212
  1849  040A                     l1208:
  1850                           
  1851                           ;./uart.h: 57:    UART_Write(text[i]);
  1852  040A  0876               	movf	UART_Write_Text@i,w
  1853  040B  0771               	addwf	UART_Write_Text@text,w
  1854  040C  00F4               	movwf	??_UART_Write_Text+1
  1855  040D  0872               	movf	UART_Write_Text@text+1,w
  1856  040E  00F3               	movwf	??_UART_Write_Text
  1857  040F  1803               	skipnc
  1858  0410  0AF3               	incf	??_UART_Write_Text,f
  1859  0411  1FF6               	btfss	UART_Write_Text@i,7
  1860  0412  2C14               	goto	u830
  1861  0413  03F3               	decf	??_UART_Write_Text,f
  1862  0414                     u830:
  1863  0414  0873               	movf	??_UART_Write_Text,w
  1864  0415  00F5               	movwf	??_UART_Write_Text+2
  1865  0416  0875               	movf	??_UART_Write_Text+2,w
  1866  0417  1283               	bcf	3,5	;RP0=0, select bank0
  1867  0418  1303               	bcf	3,6	;RP1=0, select bank0
  1868  0419  00FF               	movwf	btemp+1
  1869  041A  0874               	movf	??_UART_Write_Text+1,w
  1870  041B  0084               	movwf	4
  1871  041C  120A  118A  2003  120A  118A  	fcall	stringtab
  1872  0421  120A  118A  23AB  120A  118A  	fcall	_UART_Write
  1873  0426                     l1210:
  1874  0426  3001               	movlw	1
  1875  0427  07F6               	addwf	UART_Write_Text@i,f
  1876  0428  1803               	skipnc
  1877  0429  0AF7               	incf	UART_Write_Text@i+1,f
  1878  042A  3000               	movlw	0
  1879  042B  07F7               	addwf	UART_Write_Text@i+1,f
  1880  042C                     l1212:
  1881  042C  0876               	movf	UART_Write_Text@i,w
  1882  042D  0771               	addwf	UART_Write_Text@text,w
  1883  042E  00F4               	movwf	??_UART_Write_Text+1
  1884  042F  0872               	movf	UART_Write_Text@text+1,w
  1885  0430  00F3               	movwf	??_UART_Write_Text
  1886  0431  1803               	skipnc
  1887  0432  0AF3               	incf	??_UART_Write_Text,f
  1888  0433  1FF6               	btfss	UART_Write_Text@i,7
  1889  0434  2C36               	goto	u840
  1890  0435  03F3               	decf	??_UART_Write_Text,f
  1891  0436                     u840:
  1892  0436  0873               	movf	??_UART_Write_Text,w
  1893  0437  00F5               	movwf	??_UART_Write_Text+2
  1894  0438  0875               	movf	??_UART_Write_Text+2,w
  1895  0439  1283               	bcf	3,5	;RP0=0, select bank0
  1896  043A  1303               	bcf	3,6	;RP1=0, select bank0
  1897  043B  00FF               	movwf	btemp+1
  1898  043C  0874               	movf	??_UART_Write_Text+1,w
  1899  043D  0084               	movwf	4
  1900  043E  120A  118A  2003  120A  118A  	fcall	stringtab
  1901  0443  3A00               	xorlw	0
  1902  0444  1D03               	skipz
  1903  0445  2C47               	goto	u851
  1904  0446  2C48               	goto	u850
  1905  0447                     u851:
  1906  0447  2C0A               	goto	l1208
  1907  0448                     u850:
  1908  0448                     l91:
  1909  0448  0008               	return
  1910  0449                     __end_of_UART_Write_Text:
  1911                           
  1912                           	psect	text9
  1913  03AB                     __ptext9:	
  1914 ;; *************** function _UART_Write *****************
  1915 ;; Defined at:
  1916 ;;		line 47 in file "./uart.h"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  data            1    wreg     unsigned char 
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;  data            1    0[COMMON] unsigned char 
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  1    wreg      void 
  1923 ;; Registers used:
  1924 ;;		wreg
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1930 ;;      Params:         0       0       0       0       0
  1931 ;;      Locals:         1       0       0       0       0
  1932 ;;      Temps:          0       0       0       0       0
  1933 ;;      Totals:         1       0       0       0       0
  1934 ;;Total ram usage:        1 bytes
  1935 ;; Hardware stack levels used: 1
  1936 ;; This function calls:
  1937 ;;		Nothing
  1938 ;; This function is called by:
  1939 ;;		_UART_Write_Text
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           
  1944                           ;psect for function _UART_Write
  1945  03AB                     _UART_Write:
  1946                           
  1947                           ;incstack = 0
  1948                           ; Regs used in _UART_Write: [wreg]
  1949                           ;UART_Write@data stored from wreg
  1950  03AB  00F0               	movwf	UART_Write@data
  1951  03AC                     l1086:
  1952  03AC                     l82:	
  1953                           ;./uart.h: 47: void UART_Write(char data);./uart.h: 48: {;./uart.h: 49:   while(!TRMT);
  1954                           
  1955  03AC  1683               	bsf	3,5	;RP0=1, select bank1
  1956  03AD  1303               	bcf	3,6	;RP1=0, select bank1
  1957  03AE  1C98               	btfss	24,1	;volatile
  1958  03AF  2BB1               	goto	u501
  1959  03B0  2BB2               	goto	u500
  1960  03B1                     u501:
  1961  03B1  2BAC               	goto	l82
  1962  03B2                     u500:
  1963  03B2                     l1088:
  1964                           
  1965                           ;./uart.h: 50:   TXREG = data;
  1966  03B2  0870               	movf	UART_Write@data,w
  1967  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  1968  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  1969  03B5  0099               	movwf	25	;volatile
  1970  03B6                     l85:
  1971  03B6  0008               	return
  1972  03B7                     __end_of_UART_Write:
  1973                           
  1974                           	psect	text10
  1975  052A                     __ptext10:	
  1976 ;; *************** function _UART_Init *****************
  1977 ;; Defined at:
  1978 ;;		line 1 in file "./uart.h"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;  baudrate        4    6[BANK0 ] const long 
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;  x               2    9[COMMON] unsigned int 
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  1    wreg      unsigned char 
  1985 ;; Registers used:
  1986 ;;		wreg, status,2, status,0, pclath, cstack
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1992 ;;      Params:         0       4       0       0       0
  1993 ;;      Locals:         2       0       0       0       0
  1994 ;;      Temps:          0      12       0       0       0
  1995 ;;      Totals:         2      16       0       0       0
  1996 ;;Total ram usage:       18 bytes
  1997 ;; Hardware stack levels used: 1
  1998 ;; Hardware stack levels required when called: 1
  1999 ;; This function calls:
  2000 ;;		___aldiv
  2001 ;; This function is called by:
  2002 ;;		_main
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           
  2007                           ;psect for function _UART_Init
  2008  052A                     _UART_Init:
  2009  052A                     l1180:	
  2010                           ;incstack = 0
  2011                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  2012                           
  2013                           
  2014                           ;./uart.h: 1: char UART_Init(const long int baudrate);./uart.h: 2: {;./uart.h: 3:  unsig
      +                          ned int x;;./uart.h: 4:  x = (8000000 - baudrate*64)/(baudrate*64);
  2015  052A  1283               	bcf	3,5	;RP0=0, select bank0
  2016  052B  1303               	bcf	3,6	;RP1=0, select bank0
  2017  052C  0826               	movf	UART_Init@baudrate,w
  2018  052D  00AA               	movwf	??_UART_Init
  2019  052E  0827               	movf	UART_Init@baudrate+1,w
  2020  052F  00AB               	movwf	??_UART_Init+1
  2021  0530  0828               	movf	UART_Init@baudrate+2,w
  2022  0531  00AC               	movwf	??_UART_Init+2
  2023  0532  0829               	movf	UART_Init@baudrate+3,w
  2024  0533  00AD               	movwf	??_UART_Init+3
  2025  0534  3006               	movlw	6
  2026  0535                     u755:
  2027  0535  1003               	clrc
  2028  0536  0DAA               	rlf	??_UART_Init,f
  2029  0537  0DAB               	rlf	??_UART_Init+1,f
  2030  0538  0DAC               	rlf	??_UART_Init+2,f
  2031  0539  0DAD               	rlf	??_UART_Init+3,f
  2032  053A                     u750:
  2033  053A  3EFF               	addlw	-1
  2034  053B  1D03               	skipz
  2035  053C  2D35               	goto	u755
  2036  053D  082D               	movf	??_UART_Init+3,w
  2037  053E  00F3               	movwf	___aldiv@divisor+3
  2038  053F  082C               	movf	??_UART_Init+2,w
  2039  0540  00F2               	movwf	___aldiv@divisor+2
  2040  0541  082B               	movf	??_UART_Init+1,w
  2041  0542  00F1               	movwf	___aldiv@divisor+1
  2042  0543  082A               	movf	??_UART_Init,w
  2043  0544  00F0               	movwf	___aldiv@divisor
  2044  0545  0826               	movf	UART_Init@baudrate,w
  2045  0546  00AE               	movwf	??_UART_Init+4
  2046  0547  0827               	movf	UART_Init@baudrate+1,w
  2047  0548  00AF               	movwf	??_UART_Init+5
  2048  0549  0828               	movf	UART_Init@baudrate+2,w
  2049  054A  00B0               	movwf	??_UART_Init+6
  2050  054B  0829               	movf	UART_Init@baudrate+3,w
  2051  054C  00B1               	movwf	??_UART_Init+7
  2052  054D  3006               	movlw	6
  2053  054E                     u765:
  2054  054E  1003               	clrc
  2055  054F  0DAE               	rlf	??_UART_Init+4,f
  2056  0550  0DAF               	rlf	??_UART_Init+5,f
  2057  0551  0DB0               	rlf	??_UART_Init+6,f
  2058  0552  0DB1               	rlf	??_UART_Init+7,f
  2059  0553                     u760:
  2060  0553  3EFF               	addlw	-1
  2061  0554  1D03               	skipz
  2062  0555  2D4E               	goto	u765
  2063  0556  3000               	movlw	0
  2064  0557  00B2               	movwf	??_UART_Init+8
  2065  0558  3012               	movlw	18
  2066  0559  00B3               	movwf	??_UART_Init+9
  2067  055A  307A               	movlw	122
  2068  055B  00B4               	movwf	??_UART_Init+10
  2069  055C  3000               	movlw	0
  2070  055D  00B5               	movwf	??_UART_Init+11
  2071  055E  082E               	movf	??_UART_Init+4,w
  2072  055F  02B2               	subwf	??_UART_Init+8,f
  2073  0560  082F               	movf	??_UART_Init+5,w
  2074  0561  1C03               	skipc
  2075  0562  0F2F               	incfsz	??_UART_Init+5,w
  2076  0563  2D65               	goto	u771
  2077  0564  2D66               	goto	u772
  2078  0565                     u771:
  2079  0565  02B3               	subwf	??_UART_Init+9,f
  2080  0566                     u772:
  2081  0566  0830               	movf	??_UART_Init+6,w
  2082  0567  1C03               	skipc
  2083  0568  0F30               	incfsz	??_UART_Init+6,w
  2084  0569  2D6B               	goto	u773
  2085  056A  2D6C               	goto	u774
  2086  056B                     u773:
  2087  056B  02B4               	subwf	??_UART_Init+10,f
  2088  056C                     u774:
  2089  056C  0831               	movf	??_UART_Init+7,w
  2090  056D  1C03               	skipc
  2091  056E  0F31               	incfsz	??_UART_Init+7,w
  2092  056F  2D71               	goto	u775
  2093  0570  2D72               	goto	u776
  2094  0571                     u775:
  2095  0571  02B5               	subwf	??_UART_Init+11,f
  2096  0572                     u776:
  2097  0572  0835               	movf	??_UART_Init+11,w
  2098  0573  00F7               	movwf	___aldiv@dividend+3
  2099  0574  0834               	movf	??_UART_Init+10,w
  2100  0575  00F6               	movwf	___aldiv@dividend+2
  2101  0576  0833               	movf	??_UART_Init+9,w
  2102  0577  00F5               	movwf	___aldiv@dividend+1
  2103  0578  0832               	movf	??_UART_Init+8,w
  2104  0579  00F4               	movwf	___aldiv@dividend
  2105  057A  120A  118A  248D  120A  118A  	fcall	___aldiv
  2106  057F  0871               	movf	?___aldiv+1,w
  2107  0580  00FA               	movwf	UART_Init@x+1
  2108  0581  0870               	movf	?___aldiv,w
  2109  0582  00F9               	movwf	UART_Init@x
  2110  0583                     l1182:
  2111                           
  2112                           ;./uart.h: 5:  if(x>255)
  2113  0583  3001               	movlw	1
  2114  0584  027A               	subwf	UART_Init@x+1,w
  2115  0585  3000               	movlw	0
  2116  0586  1903               	skipnz
  2117  0587  0279               	subwf	UART_Init@x,w
  2118  0588  1C03               	skipc
  2119  0589  2D8B               	goto	u781
  2120  058A  2D8C               	goto	u780
  2121  058B                     u781:
  2122  058B  2DE8               	goto	l1188
  2123  058C                     u780:
  2124  058C                     l1184:
  2125                           
  2126                           ;./uart.h: 6:  {;./uart.h: 7:   x = (8000000 - baudrate*16)/(baudrate*16);
  2127  058C  1283               	bcf	3,5	;RP0=0, select bank0
  2128  058D  1303               	bcf	3,6	;RP1=0, select bank0
  2129  058E  0826               	movf	UART_Init@baudrate,w
  2130  058F  00AA               	movwf	??_UART_Init
  2131  0590  0827               	movf	UART_Init@baudrate+1,w
  2132  0591  00AB               	movwf	??_UART_Init+1
  2133  0592  0828               	movf	UART_Init@baudrate+2,w
  2134  0593  00AC               	movwf	??_UART_Init+2
  2135  0594  0829               	movf	UART_Init@baudrate+3,w
  2136  0595  00AD               	movwf	??_UART_Init+3
  2137  0596  3004               	movlw	4
  2138  0597                     u795:
  2139  0597  1003               	clrc
  2140  0598  0DAA               	rlf	??_UART_Init,f
  2141  0599  0DAB               	rlf	??_UART_Init+1,f
  2142  059A  0DAC               	rlf	??_UART_Init+2,f
  2143  059B  0DAD               	rlf	??_UART_Init+3,f
  2144  059C                     u790:
  2145  059C  3EFF               	addlw	-1
  2146  059D  1D03               	skipz
  2147  059E  2D97               	goto	u795
  2148  059F  082D               	movf	??_UART_Init+3,w
  2149  05A0  00F3               	movwf	___aldiv@divisor+3
  2150  05A1  082C               	movf	??_UART_Init+2,w
  2151  05A2  00F2               	movwf	___aldiv@divisor+2
  2152  05A3  082B               	movf	??_UART_Init+1,w
  2153  05A4  00F1               	movwf	___aldiv@divisor+1
  2154  05A5  082A               	movf	??_UART_Init,w
  2155  05A6  00F0               	movwf	___aldiv@divisor
  2156  05A7  0826               	movf	UART_Init@baudrate,w
  2157  05A8  00AE               	movwf	??_UART_Init+4
  2158  05A9  0827               	movf	UART_Init@baudrate+1,w
  2159  05AA  00AF               	movwf	??_UART_Init+5
  2160  05AB  0828               	movf	UART_Init@baudrate+2,w
  2161  05AC  00B0               	movwf	??_UART_Init+6
  2162  05AD  0829               	movf	UART_Init@baudrate+3,w
  2163  05AE  00B1               	movwf	??_UART_Init+7
  2164  05AF  3004               	movlw	4
  2165  05B0                     u805:
  2166  05B0  1003               	clrc
  2167  05B1  0DAE               	rlf	??_UART_Init+4,f
  2168  05B2  0DAF               	rlf	??_UART_Init+5,f
  2169  05B3  0DB0               	rlf	??_UART_Init+6,f
  2170  05B4  0DB1               	rlf	??_UART_Init+7,f
  2171  05B5                     u800:
  2172  05B5  3EFF               	addlw	-1
  2173  05B6  1D03               	skipz
  2174  05B7  2DB0               	goto	u805
  2175  05B8  3000               	movlw	0
  2176  05B9  00B2               	movwf	??_UART_Init+8
  2177  05BA  3012               	movlw	18
  2178  05BB  00B3               	movwf	??_UART_Init+9
  2179  05BC  307A               	movlw	122
  2180  05BD  00B4               	movwf	??_UART_Init+10
  2181  05BE  3000               	movlw	0
  2182  05BF  00B5               	movwf	??_UART_Init+11
  2183  05C0  082E               	movf	??_UART_Init+4,w
  2184  05C1  02B2               	subwf	??_UART_Init+8,f
  2185  05C2  082F               	movf	??_UART_Init+5,w
  2186  05C3  1C03               	skipc
  2187  05C4  0F2F               	incfsz	??_UART_Init+5,w
  2188  05C5  2DC7               	goto	u811
  2189  05C6  2DC8               	goto	u812
  2190  05C7                     u811:
  2191  05C7  02B3               	subwf	??_UART_Init+9,f
  2192  05C8                     u812:
  2193  05C8  0830               	movf	??_UART_Init+6,w
  2194  05C9  1C03               	skipc
  2195  05CA  0F30               	incfsz	??_UART_Init+6,w
  2196  05CB  2DCD               	goto	u813
  2197  05CC  2DCE               	goto	u814
  2198  05CD                     u813:
  2199  05CD  02B4               	subwf	??_UART_Init+10,f
  2200  05CE                     u814:
  2201  05CE  0831               	movf	??_UART_Init+7,w
  2202  05CF  1C03               	skipc
  2203  05D0  0F31               	incfsz	??_UART_Init+7,w
  2204  05D1  2DD3               	goto	u815
  2205  05D2  2DD4               	goto	u816
  2206  05D3                     u815:
  2207  05D3  02B5               	subwf	??_UART_Init+11,f
  2208  05D4                     u816:
  2209  05D4  0835               	movf	??_UART_Init+11,w
  2210  05D5  00F7               	movwf	___aldiv@dividend+3
  2211  05D6  0834               	movf	??_UART_Init+10,w
  2212  05D7  00F6               	movwf	___aldiv@dividend+2
  2213  05D8  0833               	movf	??_UART_Init+9,w
  2214  05D9  00F5               	movwf	___aldiv@dividend+1
  2215  05DA  0832               	movf	??_UART_Init+8,w
  2216  05DB  00F4               	movwf	___aldiv@dividend
  2217  05DC  120A  118A  248D  120A  118A  	fcall	___aldiv
  2218  05E1  0871               	movf	?___aldiv+1,w
  2219  05E2  00FA               	movwf	UART_Init@x+1
  2220  05E3  0870               	movf	?___aldiv,w
  2221  05E4  00F9               	movwf	UART_Init@x
  2222  05E5                     l1186:
  2223                           
  2224                           ;./uart.h: 8:   BRGH = 1;
  2225  05E5  1683               	bsf	3,5	;RP0=1, select bank1
  2226  05E6  1303               	bcf	3,6	;RP1=0, select bank1
  2227  05E7  1518               	bsf	24,2	;volatile
  2228  05E8                     l1188:
  2229                           
  2230                           ;./uart.h: 10:  if(x<256)
  2231  05E8  3001               	movlw	1
  2232  05E9  027A               	subwf	UART_Init@x+1,w
  2233  05EA  3000               	movlw	0
  2234  05EB  1903               	skipnz
  2235  05EC  0279               	subwf	UART_Init@x,w
  2236  05ED  1803               	skipnc
  2237  05EE  2DF0               	goto	u821
  2238  05EF  2DF1               	goto	u820
  2239  05F0                     u821:
  2240  05F0  2E03               	goto	l61
  2241  05F1                     u820:
  2242  05F1                     l1190:
  2243                           
  2244                           ;./uart.h: 11:  {;./uart.h: 12:    SPBRG = x;
  2245  05F1  0879               	movf	UART_Init@x,w
  2246  05F2  1683               	bsf	3,5	;RP0=1, select bank1
  2247  05F3  1303               	bcf	3,6	;RP1=0, select bank1
  2248  05F4  0099               	movwf	25	;volatile
  2249  05F5                     l1192:
  2250                           
  2251                           ;./uart.h: 13:    SYNC = 0;
  2252  05F5  1218               	bcf	24,4	;volatile
  2253  05F6                     l1194:
  2254                           
  2255                           ;./uart.h: 14:    SPEN = 1;
  2256  05F6  1283               	bcf	3,5	;RP0=0, select bank0
  2257  05F7  1303               	bcf	3,6	;RP1=0, select bank0
  2258  05F8  1798               	bsf	24,7	;volatile
  2259  05F9                     l1196:
  2260                           
  2261                           ;./uart.h: 15:           TRISC7 = 1;
  2262  05F9  1683               	bsf	3,5	;RP0=1, select bank1
  2263  05FA  1303               	bcf	3,6	;RP1=0, select bank1
  2264  05FB  1787               	bsf	7,7	;volatile
  2265  05FC                     l1198:
  2266                           
  2267                           ;./uart.h: 16:           TRISC6 = 1;
  2268  05FC  1707               	bsf	7,6	;volatile
  2269  05FD                     l1200:
  2270                           
  2271                           ;./uart.h: 17:           CREN = 1;
  2272  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  2273  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  2274  05FF  1618               	bsf	24,4	;volatile
  2275  0600                     l1202:
  2276                           
  2277                           ;./uart.h: 18:           TXEN = 1;
  2278  0600  1683               	bsf	3,5	;RP0=1, select bank1
  2279  0601  1303               	bcf	3,6	;RP1=0, select bank1
  2280  0602  1698               	bsf	24,5	;volatile
  2281  0603                     l61:
  2282  0603  0008               	return
  2283  0604                     __end_of_UART_Init:
  2284                           
  2285                           	psect	text11
  2286  048D                     __ptext11:	
  2287 ;; *************** function ___aldiv *****************
  2288 ;; Defined at:
  2289 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\aldiv.c"
  2290 ;; Parameters:    Size  Location     Type
  2291 ;;  divisor         4    0[COMMON] long 
  2292 ;;  dividend        4    4[COMMON] long 
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;  quotient        4    2[BANK0 ] long 
  2295 ;;  sign            1    1[BANK0 ] unsigned char 
  2296 ;;  counter         1    0[BANK0 ] unsigned char 
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  4    0[COMMON] long 
  2299 ;; Registers used:
  2300 ;;		wreg, status,2, status,0
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2306 ;;      Params:         8       0       0       0       0
  2307 ;;      Locals:         0       6       0       0       0
  2308 ;;      Temps:          1       0       0       0       0
  2309 ;;      Totals:         9       6       0       0       0
  2310 ;;Total ram usage:       15 bytes
  2311 ;; Hardware stack levels used: 1
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_UART_Init
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           
  2320                           ;psect for function ___aldiv
  2321  048D                     ___aldiv:
  2322  048D                     l1092:	
  2323                           ;incstack = 0
  2324                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2325                           
  2326  048D  1283               	bcf	3,5	;RP0=0, select bank0
  2327  048E  1303               	bcf	3,6	;RP1=0, select bank0
  2328  048F  01A1               	clrf	___aldiv@sign
  2329  0490                     l1094:
  2330  0490  1FF3               	btfss	___aldiv@divisor+3,7
  2331  0491  2C93               	goto	u521
  2332  0492  2C94               	goto	u520
  2333  0493                     u521:
  2334  0493  2CA1               	goto	l315
  2335  0494                     u520:
  2336  0494                     l1096:
  2337  0494  09F0               	comf	___aldiv@divisor,f
  2338  0495  09F1               	comf	___aldiv@divisor+1,f
  2339  0496  09F2               	comf	___aldiv@divisor+2,f
  2340  0497  09F3               	comf	___aldiv@divisor+3,f
  2341  0498  0AF0               	incf	___aldiv@divisor,f
  2342  0499  1903               	skipnz
  2343  049A  0AF1               	incf	___aldiv@divisor+1,f
  2344  049B  1903               	skipnz
  2345  049C  0AF2               	incf	___aldiv@divisor+2,f
  2346  049D  1903               	skipnz
  2347  049E  0AF3               	incf	___aldiv@divisor+3,f
  2348  049F  01A1               	clrf	___aldiv@sign
  2349  04A0  0AA1               	incf	___aldiv@sign,f
  2350  04A1                     l315:
  2351  04A1  1FF7               	btfss	___aldiv@dividend+3,7
  2352  04A2  2CA4               	goto	u531
  2353  04A3  2CA5               	goto	u530
  2354  04A4                     u531:
  2355  04A4  2CB4               	goto	l1102
  2356  04A5                     u530:
  2357  04A5                     l1098:
  2358  04A5  09F4               	comf	___aldiv@dividend,f
  2359  04A6  09F5               	comf	___aldiv@dividend+1,f
  2360  04A7  09F6               	comf	___aldiv@dividend+2,f
  2361  04A8  09F7               	comf	___aldiv@dividend+3,f
  2362  04A9  0AF4               	incf	___aldiv@dividend,f
  2363  04AA  1903               	skipnz
  2364  04AB  0AF5               	incf	___aldiv@dividend+1,f
  2365  04AC  1903               	skipnz
  2366  04AD  0AF6               	incf	___aldiv@dividend+2,f
  2367  04AE  1903               	skipnz
  2368  04AF  0AF7               	incf	___aldiv@dividend+3,f
  2369  04B0                     l1100:
  2370  04B0  3001               	movlw	1
  2371  04B1  00F8               	movwf	??___aldiv
  2372  04B2  0878               	movf	??___aldiv,w
  2373  04B3  06A1               	xorwf	___aldiv@sign,f
  2374  04B4                     l1102:
  2375  04B4  3000               	movlw	0
  2376  04B5  00A5               	movwf	___aldiv@quotient+3
  2377  04B6  3000               	movlw	0
  2378  04B7  00A4               	movwf	___aldiv@quotient+2
  2379  04B8  3000               	movlw	0
  2380  04B9  00A3               	movwf	___aldiv@quotient+1
  2381  04BA  3000               	movlw	0
  2382  04BB  00A2               	movwf	___aldiv@quotient
  2383  04BC                     l1104:
  2384  04BC  0873               	movf	___aldiv@divisor+3,w
  2385  04BD  0472               	iorwf	___aldiv@divisor+2,w
  2386  04BE  0471               	iorwf	___aldiv@divisor+1,w
  2387  04BF  0470               	iorwf	___aldiv@divisor,w
  2388  04C0  1903               	skipnz
  2389  04C1  2CC3               	goto	u541
  2390  04C2  2CC4               	goto	u540
  2391  04C3                     u541:
  2392  04C3  2D11               	goto	l1124
  2393  04C4                     u540:
  2394  04C4                     l1106:
  2395  04C4  01A0               	clrf	___aldiv@counter
  2396  04C5  0AA0               	incf	___aldiv@counter,f
  2397  04C6  2CD4               	goto	l1110
  2398  04C7                     l1108:
  2399  04C7  3001               	movlw	1
  2400  04C8  00F8               	movwf	??___aldiv
  2401  04C9                     u555:
  2402  04C9  1003               	clrc
  2403  04CA  0DF0               	rlf	___aldiv@divisor,f
  2404  04CB  0DF1               	rlf	___aldiv@divisor+1,f
  2405  04CC  0DF2               	rlf	___aldiv@divisor+2,f
  2406  04CD  0DF3               	rlf	___aldiv@divisor+3,f
  2407  04CE  0BF8               	decfsz	??___aldiv,f
  2408  04CF  2CC9               	goto	u555
  2409  04D0  3001               	movlw	1
  2410  04D1  00F8               	movwf	??___aldiv
  2411  04D2  0878               	movf	??___aldiv,w
  2412  04D3  07A0               	addwf	___aldiv@counter,f
  2413  04D4                     l1110:
  2414  04D4  1FF3               	btfss	___aldiv@divisor+3,7
  2415  04D5  2CD7               	goto	u561
  2416  04D6  2CD8               	goto	u560
  2417  04D7                     u561:
  2418  04D7  2CC7               	goto	l1108
  2419  04D8                     u560:
  2420  04D8                     l1112:
  2421  04D8  3001               	movlw	1
  2422  04D9  00F8               	movwf	??___aldiv
  2423  04DA                     u575:
  2424  04DA  1003               	clrc
  2425  04DB  0DA2               	rlf	___aldiv@quotient,f
  2426  04DC  0DA3               	rlf	___aldiv@quotient+1,f
  2427  04DD  0DA4               	rlf	___aldiv@quotient+2,f
  2428  04DE  0DA5               	rlf	___aldiv@quotient+3,f
  2429  04DF  0BF8               	decfsz	??___aldiv,f
  2430  04E0  2CDA               	goto	u575
  2431  04E1                     l1114:
  2432  04E1  0873               	movf	___aldiv@divisor+3,w
  2433  04E2  0277               	subwf	___aldiv@dividend+3,w
  2434  04E3  1D03               	skipz
  2435  04E4  2CEF               	goto	u585
  2436  04E5  0872               	movf	___aldiv@divisor+2,w
  2437  04E6  0276               	subwf	___aldiv@dividend+2,w
  2438  04E7  1D03               	skipz
  2439  04E8  2CEF               	goto	u585
  2440  04E9  0871               	movf	___aldiv@divisor+1,w
  2441  04EA  0275               	subwf	___aldiv@dividend+1,w
  2442  04EB  1D03               	skipz
  2443  04EC  2CEF               	goto	u585
  2444  04ED  0870               	movf	___aldiv@divisor,w
  2445  04EE  0274               	subwf	___aldiv@dividend,w
  2446  04EF                     u585:
  2447  04EF  1C03               	skipc
  2448  04F0  2CF2               	goto	u581
  2449  04F1  2CF3               	goto	u580
  2450  04F2                     u581:
  2451  04F2  2D02               	goto	l1120
  2452  04F3                     u580:
  2453  04F3                     l1116:
  2454  04F3  0870               	movf	___aldiv@divisor,w
  2455  04F4  02F4               	subwf	___aldiv@dividend,f
  2456  04F5  0871               	movf	___aldiv@divisor+1,w
  2457  04F6  1C03               	skipc
  2458  04F7  0F71               	incfsz	___aldiv@divisor+1,w
  2459  04F8  02F5               	subwf	___aldiv@dividend+1,f
  2460  04F9  0872               	movf	___aldiv@divisor+2,w
  2461  04FA  1C03               	skipc
  2462  04FB  0F72               	incfsz	___aldiv@divisor+2,w
  2463  04FC  02F6               	subwf	___aldiv@dividend+2,f
  2464  04FD  0873               	movf	___aldiv@divisor+3,w
  2465  04FE  1C03               	skipc
  2466  04FF  0F73               	incfsz	___aldiv@divisor+3,w
  2467  0500  02F7               	subwf	___aldiv@dividend+3,f
  2468  0501                     l1118:
  2469  0501  1422               	bsf	___aldiv@quotient,0
  2470  0502                     l1120:
  2471  0502  3001               	movlw	1
  2472  0503                     u595:
  2473  0503  1003               	clrc
  2474  0504  0CF3               	rrf	___aldiv@divisor+3,f
  2475  0505  0CF2               	rrf	___aldiv@divisor+2,f
  2476  0506  0CF1               	rrf	___aldiv@divisor+1,f
  2477  0507  0CF0               	rrf	___aldiv@divisor,f
  2478  0508  3EFF               	addlw	-1
  2479  0509  1D03               	skipz
  2480  050A  2D03               	goto	u595
  2481  050B                     l1122:
  2482  050B  3001               	movlw	1
  2483  050C  02A0               	subwf	___aldiv@counter,f
  2484  050D  1D03               	btfss	3,2
  2485  050E  2D10               	goto	u601
  2486  050F  2D11               	goto	u600
  2487  0510                     u601:
  2488  0510  2CD8               	goto	l1112
  2489  0511                     u600:
  2490  0511                     l1124:
  2491  0511  0821               	movf	___aldiv@sign,w
  2492  0512  1903               	btfsc	3,2
  2493  0513  2D15               	goto	u611
  2494  0514  2D16               	goto	u610
  2495  0515                     u611:
  2496  0515  2D21               	goto	l1128
  2497  0516                     u610:
  2498  0516                     l1126:
  2499  0516  09A2               	comf	___aldiv@quotient,f
  2500  0517  09A3               	comf	___aldiv@quotient+1,f
  2501  0518  09A4               	comf	___aldiv@quotient+2,f
  2502  0519  09A5               	comf	___aldiv@quotient+3,f
  2503  051A  0AA2               	incf	___aldiv@quotient,f
  2504  051B  1903               	skipnz
  2505  051C  0AA3               	incf	___aldiv@quotient+1,f
  2506  051D  1903               	skipnz
  2507  051E  0AA4               	incf	___aldiv@quotient+2,f
  2508  051F  1903               	skipnz
  2509  0520  0AA5               	incf	___aldiv@quotient+3,f
  2510  0521                     l1128:
  2511  0521  0825               	movf	___aldiv@quotient+3,w
  2512  0522  00F3               	movwf	?___aldiv+3
  2513  0523  0824               	movf	___aldiv@quotient+2,w
  2514  0524  00F2               	movwf	?___aldiv+2
  2515  0525  0823               	movf	___aldiv@quotient+1,w
  2516  0526  00F1               	movwf	?___aldiv+1
  2517  0527  0822               	movf	___aldiv@quotient,w
  2518  0528  00F0               	movwf	?___aldiv
  2519  0529                     l325:
  2520  0529  0008               	return
  2521  052A                     __end_of___aldiv:
  2522  007E                     btemp	set	126	;btemp
  2523  007E                     wtemp0	set	126
  2524                           
  2525                           	psect	config
  2526                           
  2527                           ;Config register CONFIG @ 0x2007
  2528                           ;	Oscillator Selection bits
  2529                           ;	FOSC = XT, XT oscillator
  2530                           ;	Watchdog Timer Enable bit
  2531                           ;	WDTE = OFF, WDT disabled
  2532                           ;	Power-up Timer Enable bit
  2533                           ;	PWRTE = OFF, PWRT disabled
  2534                           ;	Brown-out Reset Enable bit
  2535                           ;	BOREN = OFF, BOR disabled
  2536                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2537                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2538                           ;	Data EEPROM Memory Code Protection bit
  2539                           ;	CPD = OFF, Data EEPROM code protection off
  2540                           ;	Flash Program Memory Write Enable bits
  2541                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2542                           ;	In-Circuit Debugger Mode bit
  2543                           ;	DEBUG = 0x1, unprogrammed default
  2544                           ;	Flash Program Memory Code Protection bit
  2545                           ;	CP = OFF, Code protection off
  2546  2007                     	org	8199
  2547  2007  3F39               	dw	16185

Data Sizes:
    Strings     19
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      39
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_4(CODE[4]), STR_1(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@out(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 10
		 -> STR_6(CODE[3]), STR_5(CODE[6]), STR_3(CODE[3]), STR_2(CODE[6]), 
		 -> main@out(BANK0[10]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _UART_Write_Text->_UART_Write
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    3296
                                             22 BANK0     17    17      0
                          _UART_Init
                    _UART_Write_Text
                            _spiInit
                            _spiRead
                           _spiWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1320
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     360
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      7     5      2     568
                                              1 COMMON     7     5      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _UART_Write_Text
     _UART_Write
   _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      27       5       48.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Nov 25 14:02:39 2021

                       pc 0002               _SSPSTATbits 0094                        l61 0603  
                      l82 03AC                        l91 0448                        l85 03B6  
                      fsr 0004                       l122 039B                       l125 03A1  
                     l118 03C7                       l119 03CC                       l136 03AA  
                     l128 039A                       l315 04A1                       l325 0529  
                     l246 06EB                       l522 048C                       l532 0406  
                     _RA1 0029                       _RA2 002A                       _RB0 0030  
                     _RD0 0040                       _RD1 0041                       u500 03B2  
                     u501 03B1                       u510 03A1                       u511 03A0  
                     u600 0511                       u520 0494                       u601 0510  
                     u521 0493                       u610 0516                       u530 04A5  
                     u611 0515                       u531 04A4                       u540 04C4  
                     u620 0451                       u541 04C3                       u621 0450  
                     u710 03E5                       u711 03E4                       u560 04D8  
                     u800 05B5                       u640 0463                       u720 03EF  
                     u561 04D7                       u641 0462                       u721 03EE  
                     u705 03D7                       u555 04C9                       u811 05C7  
                     u635 0455                       u580 04F3                       u820 05F1  
                     u812 05C8                       u660 0474                       u740 0402  
                     u900 067D                       u581 04F2                       u821 05F0  
                     u813 05CD                       u805 05B0                       u661 0473  
                     u741 0401                       u725 03EB                       u901 067C  
                     u814 05CE                       u750 053A                       u830 0414  
                     u910 0683                       u575 04DA                       u815 05D3  
                     u655 0464                       u735 03F6                       u911 0682  
                     u816 05D4                       u760 0553                       u840 0436  
                     u680 0488                       u920 06D5                       u585 04EF  
                     u681 0487                       u665 0470                       u921 06D4  
                     u850 0448                       u690 03D3                       u930 06E7  
                     u595 0503                       u771 0565                       u755 0535  
                     u851 0447                       u675 047C                       u691 03D2  
                     u931 06E6                       u780 058C                       u772 0566  
                     u860 03BF                       u940 0718                       u781 058B  
                     u773 056B                       u765 054E                       u861 03BE  
                     u941 0717                       u790 059C                       u774 056C  
                     u870 0612                       u950 077E                       u775 0571  
                     u871 0611                       u951 077D                       u776 0572  
                     u880 064C                       u960 07E5                       u881 064B  
                     u961 07E4                       u890 0672                       u795 0597  
                     u891 0671                       u895 066E                       u977 071F  
                     u987 075C                       u997 0770                       fsr0 0004  
                     indf 0000                      l1100 04B0                      l1110 04D4  
                    l1102 04B4                      l1120 0502                      l1112 04D8  
                    l1104 04BC                      l1200 05FD                      l1122 050B  
                    l1114 04E1                      l1106 04C4                      l1202 0600  
                    l1210 0426                      l1116 04F3                      l1108 04C7  
                    l1124 0511                      l1212 042C                      l1220 03C3  
                    l1140 045B                      l1132 0449                      l1300 06F2  
                    l1126 0516                      l1118 0501                      l1206 0407  
                    l1222 03C6                      l1214 03B8                      l1150 047B  
                    l1142 045F                      l1134 044B                      l1310 0705  
                    l1302 06F3                      l1128 0521                      l1208 040A  
                    l1216 03BF                      l1224 0396                      l1152 0482  
                    l1144 0463                      l1136 0451                      l1160 03D3  
                    l1240 061E                      l1232 0607                      l1320 0719  
                    l1312 070E                      l1304 06F6                      l1218 03C1  
                    l1090 039B                      l1226 03A2                      l1146 0474  
                    l1138 0454                      l1154 0488                      l1170 03EF  
                    l1162 03D6                      l1250 0648                      l1234 060C  
                    l1330 074D                      l1322 0723                      l1314 0712  
                    l1306 06F7                      l1092 048D                      l1180 052A  
                    l1228 03A7                      l1148 047A                      l1172 03F5  
                    l1164 03DD                      l1252 064C                      l1244 061F  
                    l1236 0612                      l1332 0756                      l1324 0729  
                    l1340 0778                      l1316 0714                      l1308 06F8  
                    l1094 0490                      l1190 05F1                      l1182 0583  
                    l1086 03AC                      l1174 03FC                      l1166 03E1  
                    l1158 03CD                      l1270 0683                      l1262 0657  
                    l1254 0650                      l1246 063C                      l1238 0619  
                    l1350 079D                      l1342 077E                      l1334 076A  
                    l1326 0736                      l1318 0718                      l1096 0494  
                    l1192 05F5                      l1184 058C                      l1088 03B2  
                    l1168 03E5                      l1176 0402                      l1280 06C8  
                    l1272 068A                      l1256 0655                      l1248 0644  
                    l1360 07DB                      l1352 07AB                      l1344 0780  
                    l1336 0774                      l1328 0744                      l1098 04A5  
                    l1194 05F6                      l1186 05E5                      l1282 06CC  
                    l1274 068E                      l1266 0673                      l1370 07F5  
                    l1362 07DE                      l1354 07B4                      l1346 078A  
                    l1338 0777                      l1196 05F9                      l1188 05E8  
                    l1276 0693                      l1268 067D                      l1284 06D5  
                    l1356 07BD                      l1348 0790                      l1364 07DF  
                    l1198 05FC                      l1278 06C1                      l1286 06E7  
                    l1366 07E5                      l1358 07D1                      l1294 06EC  
                    l1392 0631                      l1368 07E7                      l1296 06EF  
                    l1298 06F0                      STR_1 0029                      STR_2 001D  
                    STR_3 002D                      STR_4 0029                      STR_5 0023  
                    STR_6 002D                      _BRGH 04C2                      _CREN 00C4  
                    u1007 0786                      u1017 07C3                      u1027 07D7  
                    u1037 07EF                      _RCIF 0065                      _SPEN 00C7  
                    _TRMT 04C1                      _TXEN 04C5                      _SYNC 04C4  
                    _main 06EC                      btemp 007E                      start 0000  
 __end_of_UART_Write_Text 0449           __end_of___aldiv 052A                     ?_main 0070  
         __end_of___lwdiv 048D           __end_of___lwmod 0407                     _RCREG 001A  
                   _SPBRG 0099                     _PORTD 0008                     _TRISA 0085  
                   _TRISB 0086                     _TRISD 0088                     _SSPIF 0063  
                   _TXREG 0019                     _nRBPU 040F               ?_UART_Write 0070  
      __size_of_UART_Init 00DA           __end_of_dpowers 001D                     pclath 000A  
         __end_of_spiInit 03CD           __end_of_spiRead 03AB                     status 0003  
                   wtemp0 007E           __end_of_sprintf 06EC           __initialization 07FC  
            __end_of_main 07FC                    ??_main 0036                    _TRISC3 043B  
                  _TRISC5 043D                    _TRISC6 043E                    _TRISC7 043F  
                  _SSPCON 0014                    _SSPBUF 0013         __end_of_UART_Init 0604  
     __size_of_UART_Write 000C                 ??___aldiv 0078          ?_UART_Write_Text 0071  
               ??___lwdiv 0074                 ??___lwmod 007C                    main@s1 0043  
                  main@s2 0045          __end_of_spiWrite 039B                 ??_spiInit 0073  
               ??_spiRead 0070                 ??_sprintf 0023   __end_of__initialization 07FC  
          __pcstackCOMMON 0070                __pmaintext 06EC   __size_of_spiReceiveWait 0007  
            ??_UART_Write 0070                   _SSPSTAT 0094                __stringtab 0003  
               ?_spiWrite 0070                   ___aldiv 048D        __end_of_UART_Write 03B7  
                 ___lwdiv 0449                   ___lwmod 03CD                   __ptext1 0604  
                 __ptext2 03CD                   __ptext3 0449                   __ptext4 0395  
                 __ptext5 03A2                   __ptext6 039B                   __ptext7 03B7  
                 __ptext8 0407                   __ptext9 03AB                   _dpowers 0013  
        ___aldiv@dividend 0074                   _spiInit 03B7                   _spiRead 03A2  
                 _sprintf 0604                   main@out 0039      end_of_initialization 07FC  
        ___aldiv@quotient 0022                ??_spiWrite 0070                 _UART_Init 052A  
          UART_Write@data 0070               spiWrite@dat 0070            _spiReceiveWait 039B  
              ?_UART_Init 0026  __size_of_UART_Write_Text 0042       start_initialization 07FC  
  __end_of_spiReceiveWait 03A2                 ___latbits 0002             __pcstackBANK0 0020  
             sprintf@flag 0027               sprintf@prec 0028          ___lwdiv@dividend 0072  
         ?_spiReceiveWait 0070                  ?___aldiv 0070                  ?___lwdiv 0070  
                ?___lwmod 0078               ??_UART_Init 002A         __size_of_spiWrite 0006  
               __pstrings 0003                  ?_spiInit 0070                  ?_spiRead 0070  
        ___lwdiv@quotient 0075                  ?_sprintf 0020                UART_Init@x 0079  
       ??_UART_Write_Text 0073           ___aldiv@divisor 0070      spiInit@sTransmitEdge 0072  
         ___aldiv@counter 0020        spiInit@sDataSample 0070         UART_Init@baudrate 0026  
             __stringbase 0012          __size_of___aldiv 009D          __size_of___lwdiv 0044  
        __size_of___lwmod 003A        __end_of__stringtab 0013                sprintf@val 0029  
         ___lwdiv@divisor 0070           ___lwdiv@counter 0077                  __ptext10 052A  
                __ptext11 048D          __size_of_spiInit 0016          __size_of_spiRead 0009  
        __size_of_sprintf 00E8       UART_Write_Text@text 0071             __size_of_main 0110  
                _spiWrite 0395              spiInit@sType 0073         spiInit@sClockIdle 0071  
               sprintf@ap 0026                 sprintf@sp 002B          ___lwmod@dividend 007A  
        ??_spiReceiveWait 0070                 stringcode 000D           _UART_Write_Text 0407  
                sprintf@c 002C                  sprintf@f 0020           ___lwmod@divisor 0078  
         ___lwmod@counter 007D                  stringdir 000D                  stringtab 0003  
            ___aldiv@sign 0021                _UART_Write 03AB          UART_Write_Text@i 0076  
